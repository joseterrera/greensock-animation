{"version":3,"sources":["js/lib/shuffle.js","js/lib/helpers.js","js/lib/selector.js","node_modules/gsap/TweenLite.js","js/lib/CustomEase.js","js/lib/CustomWiggle.js","js/lib/ThrowPropsPlugin.js","app.js"],"names":["remove","arrCopy","arr","slice","thisisWhatIsSpliceOut","splice","start","count","whatRemains","remove1","remove1RandomItem","Math","floor","random","length","shuffle","tempArr","removedItem","reduce","acc","item","concat","head","list","simpleStateClosure","state","initialState","getNextShuffleItem","getNextShuffledItemGenerator","flatten","multiList","selector","query","context","document","call","querySelectorAll","fSelector","selectMultiple","queries","map","_gsScope","module","exports","global","window","_gsQueue","push","_gsDefine","Ease","_numbersExp","_svgPathExp","_scientific","_needsParsingExp","_bezierError","_bezierToPoints","x1","y1","x2","y2","x3","y3","x4","y4","threshold","points","index","x12","y12","x23","y23","x34","y34","x123","y123","x234","y234","x1234","y1234","dx","dy","d2","abs","d3","x","y","_pathDataToBezier","d","a","replace","m","n","match","path","relativeX","relativeY","elements","l","i","command","isRelative","segment","startX","startY","prevCommand","difX","difY","isNaN","toUpperCase","closed","_findMinimum","values","min","_normalize","height","originY","max","tx","ty","sx","sy","_getRatio","p","point","lookup","nx","cx","cy","CustomEase","id","data","config","_calcEnd","getRatio","setData","prototype","constructor","closest","a1","a2","inc","j","prevPoint","precision","fast","test","indexOf","unshift","rawBezier","getSVGData","create","version","bezierToPoints","get","ease","rnd","width","e","slope","prevX","prevY","invert","console","log","querySelector","setAttribute","join","pop","name","getGlobal","GreenSockGlobals","require","define","amd","eases","easeOut","easeInOut","anticipate","uniform","_linearEase","_parseEase","invertNonCustomEases","CustomWiggle","vars","update","wiggles","type","yEase","xEase","nextX","nextY","angle","handleX","handleY","easedX","timingEase","amplitudeEase","atan2","cos","sin","t","r","s","o","_overwriteProps","h","u","f","globals","c","z","scale","scaleX","scaleY","rotation","rotationZ","rotationX","rotationY","skewX","skewY","xPercent","yPercent","_","end","Array","Number","unitFactor","g","calculateChange","defaultEase","v","calculateDuration","calculateTweenDuration","T","w","b","P","S","k","O","C","throwProps","R","A","checkpoint","M","resistance","defaultResistance","getByTarget","isTrackingProp","velocity","getVelocity","substr","defaultUnitFactors","API","_autoCSS","time","totalTime","track","untrack","isTracking","_cssRegister","com","greensock","plugins","CSSPlugin","_internals","_parseToProxy","_setPluginRatio","CSSPropTween","_registerComplexSpecialProp","parser","preventOvershoot","_enableTransforms","proxy","pt","plugin","setRatio","_onInitTween","_tween","to","render","css","duration","_delay","immediateRender","invalidate","kill","target","_props","_ease","_duration","c1","c2","_kill","_roundProps","round","activate","defaultView","getComputedStyle","_gsTransform","style","getPropertyValue","toLowerCase","currentStyle","parseFloat","ticker","v1","v2","t1","t2","_prev","_next","_firstVP","_lookup","elem","nodeType","addEventListener","addProp","_altProp","set","overwrite","removeProp","PI","split","main","event","add","curriedAdd","curry","fn","args","bind","selectMultiFromDocument","flowers","peak","clouds","cloud1","cloud2Shadow","cloud1Shadow","closedEgg","flowersArray","yellowFlowersArray","eyes","eggs","clearStage","clearTl","TimelineMax","autoAlpha","cloud2","fill","cloudShadow","enterFloorVegetation","enterFloorVegetationTl","fromTo","transformOrigin","Back","onComplete","startBlinking","flowerDance","removeFirstItems","removeItems1","leftOver1","removeItems2","leftOver2","repeat","repeatDelay","birdsEating","birdsEatingTl","birdBlinksTl","forEach","eye","cloudsMoving","cloudsMovingTl","Linear","easeNone","bunnyInTheBack","bunnyInTheBackTl","eggsShaking","eggsShakingTl","egg","yoyo","bunnyHand","bunnyHandTl","Power2","eggPopping","go","masterTl"],"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","file":"app.2b424ac9.map","sourcesContent":["\n\nexport const remove = count => start => arr => {\n  // create a copy of the original array\n  // now you're not fucking with the original when you\n  // mutate the data\n  const arrCopy = arr.slice()\n\n  // NOW MUTATE THIS\n  const thisisWhatIsSpliceOut = arrCopy.splice(start, count)\n\n  // this now no longer has the spliced out item, we want this\n  const whatRemains = arrCopy\n\n  // This seems confusing because arrCopy is mutated by\n  // the dangerous mutating function splce\n  return [thisisWhatIsSpliceOut, whatRemains]\n}\n\nexport const remove1 = remove(1)\n// Not pure\nexport const remove1RandomItem = arr => remove1(Math.floor(Math.random() * arr.length))(arr)\n\nexport const shuffle = arr => {\n  let tempArr = arr\n  let removedItem\n  return arr.reduce((acc, item) => ([removedItem, tempArr] = remove1RandomItem(tempArr), acc.concat(removedItem)), [])\n}\n\n\nexport const head = list => list[0]\n\n// state manager\nexport const simpleStateClosure = fn => initialState => {\n  let state = initialState\n  return getNextShuffleItem(initialState)(state)\n}\n\n// generator function - a function that can be paused and resumed, so that other code can run in between.\n//it will not execute the body of the function. Instead, it will return a generator object called an iterator,\n//which is an object that controls the exeuciotn of the generation via .next()\n\n//A generator allows you to treat your function like a program, that can be used following the rules that one defines.\n\n//To execute a program , we need an interpreter, that will give that special behavior that we want.\n//yield is a command to the interpreter.\nexport const getNextShuffleItem = initialState => state => () => {\n  const [thisisWhatIsSpliceOut, whatRemains] = remove1RandomItem(state)\n  state = whatRemains.length ? whatRemains : initialState\n  return head(thisisWhatIsSpliceOut)\n}\n\nexport const getNextShuffledItemGenerator = simpleStateClosure(getNextShuffleItem)\n\n// export const getNextShuffledItem = getNextShuffledItemGenerator([1,2,3,4,5,6])\n","export const flatten = multiList => multiList.reduce( (acc,item) => acc.concat(item), [] )\n","import {flatten} from './helpers'\nexport const selector = (query,context = document) => [].slice.call( \n  context.querySelectorAll(query)\n)\n\n// const pipe = (funcs) => input => funcs.reduce( (acc,item) => item(acc), input )\n\nexport const fSelector = (context) => query => selector(query,context)\nexport const selectMultiple = context => (...queries) => flatten(queries.map(\n  fSelector(context) \n))","/*!\n * VERSION: 1.20.4\n * DATE: 2018-02-15\n * UPDATES AND DOCS AT: http://greensock.com\n *\n * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.\n * This work is subject to the terms at http://greensock.com/standard-license or for\n * Club GreenSock members, the software agreement that was issued with your membership.\n * \n * @author: Jack Doyle, jack@greensock.com\n */\n(function(window, moduleName) {\n\n\t\t\"use strict\";\n\t\tvar _exports = {},\n\t\t\t_doc = window.document,\n\t\t\t_globals = window.GreenSockGlobals = window.GreenSockGlobals || window;\n\t\tif (_globals.TweenLite) {\n\t\t\treturn; //in case the core set of classes is already loaded, don't instantiate twice.\n\t\t}\n\t\tvar _namespace = function(ns) {\n\t\t\t\tvar a = ns.split(\".\"),\n\t\t\t\t\tp = _globals, i;\n\t\t\t\tfor (i = 0; i < a.length; i++) {\n\t\t\t\t\tp[a[i]] = p = p[a[i]] || {};\n\t\t\t\t}\n\t\t\t\treturn p;\n\t\t\t},\n\t\t\tgs = _namespace(\"com.greensock\"),\n\t\t\t_tinyNum = 0.0000000001,\n\t\t\t_slice = function(a) { //don't use Array.prototype.slice.call(target, 0) because that doesn't work in IE8 with a NodeList that's returned by querySelectorAll()\n\t\t\t\tvar b = [],\n\t\t\t\t\tl = a.length,\n\t\t\t\t\ti;\n\t\t\t\tfor (i = 0; i !== l; b.push(a[i++])) {}\n\t\t\t\treturn b;\n\t\t\t},\n\t\t\t_emptyFunc = function() {},\n\t\t\t_isArray = (function() { //works around issues in iframe environments where the Array global isn't shared, thus if the object originates in a different window/iframe, \"(obj instanceof Array)\" will evaluate false. We added some speed optimizations to avoid Object.prototype.toString.call() unless it's absolutely necessary because it's VERY slow (like 20x slower)\n\t\t\t\tvar toString = Object.prototype.toString,\n\t\t\t\t\tarray = toString.call([]);\n\t\t\t\treturn function(obj) {\n\t\t\t\t\treturn obj != null && (obj instanceof Array || (typeof(obj) === \"object\" && !!obj.push && toString.call(obj) === array));\n\t\t\t\t};\n\t\t\t}()),\n\t\t\ta, i, p, _ticker, _tickerActive,\n\t\t\t_defLookup = {},\n\n\t\t\t/**\n\t\t\t * @constructor\n\t\t\t * Defines a GreenSock class, optionally with an array of dependencies that must be instantiated first and passed into the definition.\n\t\t\t * This allows users to load GreenSock JS files in any order even if they have interdependencies (like CSSPlugin extends TweenPlugin which is\n\t\t\t * inside TweenLite.js, but if CSSPlugin is loaded first, it should wait to run its code until TweenLite.js loads and instantiates TweenPlugin\n\t\t\t * and then pass TweenPlugin to CSSPlugin's definition). This is all done automatically and internally.\n\t\t\t *\n\t\t\t * Every definition will be added to a \"com.greensock\" global object (typically window, but if a window.GreenSockGlobals object is found,\n\t\t\t * it will go there as of v1.7). For example, TweenLite will be found at window.com.greensock.TweenLite and since it's a global class that should be available anywhere,\n\t\t\t * it is ALSO referenced at window.TweenLite. However some classes aren't considered global, like the base com.greensock.core.Animation class, so\n\t\t\t * those will only be at the package like window.com.greensock.core.Animation. Again, if you define a GreenSockGlobals object on the window, everything\n\t\t\t * gets tucked neatly inside there instead of on the window directly. This allows you to do advanced things like load multiple versions of GreenSock\n\t\t\t * files and put them into distinct objects (imagine a banner ad uses a newer version but the main site uses an older one). In that case, you could\n\t\t\t * sandbox the banner one like:\n\t\t\t *\n\t\t\t * <script>\n\t\t\t *     var gs = window.GreenSockGlobals = {}; //the newer version we're about to load could now be referenced in a \"gs\" object, like gs.TweenLite.to(...). Use whatever alias you want as long as it's unique, \"gs\" or \"banner\" or whatever.\n\t\t\t * </script>\n\t\t\t * <script src=\"js/greensock/v1.7/TweenMax.js\"></script>\n\t\t\t * <script>\n\t\t\t *     window.GreenSockGlobals = window._gsQueue = window._gsDefine = null; //reset it back to null (along with the special _gsQueue variable) so that the next load of TweenMax affects the window and we can reference things directly like TweenLite.to(...)\n\t\t\t * </script>\n\t\t\t * <script src=\"js/greensock/v1.6/TweenMax.js\"></script>\n\t\t\t * <script>\n\t\t\t *     gs.TweenLite.to(...); //would use v1.7\n\t\t\t *     TweenLite.to(...); //would use v1.6\n\t\t\t * </script>\n\t\t\t *\n\t\t\t * @param {!string} ns The namespace of the class definition, leaving off \"com.greensock.\" as that's assumed. For example, \"TweenLite\" or \"plugins.CSSPlugin\" or \"easing.Back\".\n\t\t\t * @param {!Array.<string>} dependencies An array of dependencies (described as their namespaces minus \"com.greensock.\" prefix). For example [\"TweenLite\",\"plugins.TweenPlugin\",\"core.Animation\"]\n\t\t\t * @param {!function():Object} func The function that should be called and passed the resolved dependencies which will return the actual class for this definition.\n\t\t\t * @param {boolean=} global If true, the class will be added to the global scope (typically window unless you define a window.GreenSockGlobals object)\n\t\t\t */\n\t\t\tDefinition = function(ns, dependencies, func, global) {\n\t\t\t\tthis.sc = (_defLookup[ns]) ? _defLookup[ns].sc : []; //subclasses\n\t\t\t\t_defLookup[ns] = this;\n\t\t\t\tthis.gsClass = null;\n\t\t\t\tthis.func = func;\n\t\t\t\tvar _classes = [];\n\t\t\t\tthis.check = function(init) {\n\t\t\t\t\tvar i = dependencies.length,\n\t\t\t\t\t\tmissing = i,\n\t\t\t\t\t\tcur, a, n, cl;\n\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\tif ((cur = _defLookup[dependencies[i]] || new Definition(dependencies[i], [])).gsClass) {\n\t\t\t\t\t\t\t_classes[i] = cur.gsClass;\n\t\t\t\t\t\t\tmissing--;\n\t\t\t\t\t\t} else if (init) {\n\t\t\t\t\t\t\tcur.sc.push(this);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (missing === 0 && func) {\n\t\t\t\t\t\ta = (\"com.greensock.\" + ns).split(\".\");\n\t\t\t\t\t\tn = a.pop();\n\t\t\t\t\t\tcl = _namespace(a.join(\".\"))[n] = this.gsClass = func.apply(func, _classes);\n\n\t\t\t\t\t\t//exports to multiple environments\n\t\t\t\t\t\tif (global) {\n\t\t\t\t\t\t\t_globals[n] = _exports[n] = cl; //provides a way to avoid global namespace pollution. By default, the main classes like TweenLite, Power1, Strong, etc. are added to window unless a GreenSockGlobals is defined. So if you want to have things added to a custom object instead, just do something like window.GreenSockGlobals = {} before loading any GreenSock files. You can even set up an alias like window.GreenSockGlobals = windows.gs = {} so that you can access everything like gs.TweenLite. Also remember that ALL classes are added to the window.com.greensock object (in their respective packages, like com.greensock.easing.Power1, com.greensock.TweenLite, etc.)\n\t\t\t\t\t\t\tif (typeof(module) !== \"undefined\" && module.exports) { //node\n\t\t\t\t\t\t\t\tif (ns === moduleName) {\n\t\t\t\t\t\t\t\t\tmodule.exports = _exports[moduleName] = cl;\n\t\t\t\t\t\t\t\t\tfor (i in _exports) {\n\t\t\t\t\t\t\t\t\t\tcl[i] = _exports[i];\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else if (_exports[moduleName]) {\n\t\t\t\t\t\t\t\t\t_exports[moduleName][n] = cl;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if (typeof(define) === \"function\" && define.amd){ //AMD\n\t\t\t\t\t\t\t\tdefine((window.GreenSockAMDPath ? window.GreenSockAMDPath + \"/\" : \"\") + ns.split(\".\").pop(), [], function() { return cl; });\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (i = 0; i < this.sc.length; i++) {\n\t\t\t\t\t\t\tthis.sc[i].check();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tthis.check(true);\n\t\t\t},\n\n\t\t\t//used to create Definition instances (which basically registers a class that has dependencies).\n\t\t\t_gsDefine = window._gsDefine = function(ns, dependencies, func, global) {\n\t\t\t\treturn new Definition(ns, dependencies, func, global);\n\t\t\t},\n\n\t\t\t//a quick way to create a class that doesn't have any dependencies. Returns the class, but first registers it in the GreenSock namespace so that other classes can grab it (other classes might be dependent on the class).\n\t\t\t_class = gs._class = function(ns, func, global) {\n\t\t\t\tfunc = func || function() {};\n\t\t\t\t_gsDefine(ns, [], function(){ return func; }, global);\n\t\t\t\treturn func;\n\t\t\t};\n\n\t\t_gsDefine.globals = _globals;\n\n\n\n/*\n * ----------------------------------------------------------------\n * Ease\n * ----------------------------------------------------------------\n */\n\t\tvar _baseParams = [0, 0, 1, 1],\n\t\t\tEase = _class(\"easing.Ease\", function(func, extraParams, type, power) {\n\t\t\t\tthis._func = func;\n\t\t\t\tthis._type = type || 0;\n\t\t\t\tthis._power = power || 0;\n\t\t\t\tthis._params = extraParams ? _baseParams.concat(extraParams) : _baseParams;\n\t\t\t}, true),\n\t\t\t_easeMap = Ease.map = {},\n\t\t\t_easeReg = Ease.register = function(ease, names, types, create) {\n\t\t\t\tvar na = names.split(\",\"),\n\t\t\t\t\ti = na.length,\n\t\t\t\t\tta = (types || \"easeIn,easeOut,easeInOut\").split(\",\"),\n\t\t\t\t\te, name, j, type;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tname = na[i];\n\t\t\t\t\te = create ? _class(\"easing.\"+name, null, true) : gs.easing[name] || {};\n\t\t\t\t\tj = ta.length;\n\t\t\t\t\twhile (--j > -1) {\n\t\t\t\t\t\ttype = ta[j];\n\t\t\t\t\t\t_easeMap[name + \".\" + type] = _easeMap[type + name] = e[type] = ease.getRatio ? ease : ease[type] || new ease();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\tp = Ease.prototype;\n\t\tp._calcEnd = false;\n\t\tp.getRatio = function(p) {\n\t\t\tif (this._func) {\n\t\t\t\tthis._params[0] = p;\n\t\t\t\treturn this._func.apply(null, this._params);\n\t\t\t}\n\t\t\tvar t = this._type,\n\t\t\t\tpw = this._power,\n\t\t\t\tr = (t === 1) ? 1 - p : (t === 2) ? p : (p < 0.5) ? p * 2 : (1 - p) * 2;\n\t\t\tif (pw === 1) {\n\t\t\t\tr *= r;\n\t\t\t} else if (pw === 2) {\n\t\t\t\tr *= r * r;\n\t\t\t} else if (pw === 3) {\n\t\t\t\tr *= r * r * r;\n\t\t\t} else if (pw === 4) {\n\t\t\t\tr *= r * r * r * r;\n\t\t\t}\n\t\t\treturn (t === 1) ? 1 - r : (t === 2) ? r : (p < 0.5) ? r / 2 : 1 - (r / 2);\n\t\t};\n\n\t\t//create all the standard eases like Linear, Quad, Cubic, Quart, Quint, Strong, Power0, Power1, Power2, Power3, and Power4 (each with easeIn, easeOut, and easeInOut)\n\t\ta = [\"Linear\",\"Quad\",\"Cubic\",\"Quart\",\"Quint,Strong\"];\n\t\ti = a.length;\n\t\twhile (--i > -1) {\n\t\t\tp = a[i]+\",Power\"+i;\n\t\t\t_easeReg(new Ease(null,null,1,i), p, \"easeOut\", true);\n\t\t\t_easeReg(new Ease(null,null,2,i), p, \"easeIn\" + ((i === 0) ? \",easeNone\" : \"\"));\n\t\t\t_easeReg(new Ease(null,null,3,i), p, \"easeInOut\");\n\t\t}\n\t\t_easeMap.linear = gs.easing.Linear.easeIn;\n\t\t_easeMap.swing = gs.easing.Quad.easeInOut; //for jQuery folks\n\n\n/*\n * ----------------------------------------------------------------\n * EventDispatcher\n * ----------------------------------------------------------------\n */\n\t\tvar EventDispatcher = _class(\"events.EventDispatcher\", function(target) {\n\t\t\tthis._listeners = {};\n\t\t\tthis._eventTarget = target || this;\n\t\t});\n\t\tp = EventDispatcher.prototype;\n\n\t\tp.addEventListener = function(type, callback, scope, useParam, priority) {\n\t\t\tpriority = priority || 0;\n\t\t\tvar list = this._listeners[type],\n\t\t\t\tindex = 0,\n\t\t\t\tlistener, i;\n\t\t\tif (this === _ticker && !_tickerActive) {\n\t\t\t\t_ticker.wake();\n\t\t\t}\n\t\t\tif (list == null) {\n\t\t\t\tthis._listeners[type] = list = [];\n\t\t\t}\n\t\t\ti = list.length;\n\t\t\twhile (--i > -1) {\n\t\t\t\tlistener = list[i];\n\t\t\t\tif (listener.c === callback && listener.s === scope) {\n\t\t\t\t\tlist.splice(i, 1);\n\t\t\t\t} else if (index === 0 && listener.pr < priority) {\n\t\t\t\t\tindex = i + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tlist.splice(index, 0, {c:callback, s:scope, up:useParam, pr:priority});\n\t\t};\n\n\t\tp.removeEventListener = function(type, callback) {\n\t\t\tvar list = this._listeners[type], i;\n\t\t\tif (list) {\n\t\t\t\ti = list.length;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tif (list[i].c === callback) {\n\t\t\t\t\t\tlist.splice(i, 1);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tp.dispatchEvent = function(type) {\n\t\t\tvar list = this._listeners[type],\n\t\t\t\ti, t, listener;\n\t\t\tif (list) {\n\t\t\t\ti = list.length;\n\t\t\t\tif (i > 1) { \n\t\t\t\t\tlist = list.slice(0); //in case addEventListener() is called from within a listener/callback (otherwise the index could change, resulting in a skip)\n\t\t\t\t}\n\t\t\t\tt = this._eventTarget;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tlistener = list[i];\n\t\t\t\t\tif (listener) {\n\t\t\t\t\t\tif (listener.up) {\n\t\t\t\t\t\t\tlistener.c.call(listener.s || t, {type:type, target:t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tlistener.c.call(listener.s || t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\n/*\n * ----------------------------------------------------------------\n * Ticker\n * ----------------------------------------------------------------\n */\n \t\tvar _reqAnimFrame = window.requestAnimationFrame,\n\t\t\t_cancelAnimFrame = window.cancelAnimationFrame,\n\t\t\t_getTime = Date.now || function() {return new Date().getTime();},\n\t\t\t_lastUpdate = _getTime();\n\n\t\t//now try to determine the requestAnimationFrame and cancelAnimationFrame functions and if none are found, we'll use a setTimeout()/clearTimeout() polyfill.\n\t\ta = [\"ms\",\"moz\",\"webkit\",\"o\"];\n\t\ti = a.length;\n\t\twhile (--i > -1 && !_reqAnimFrame) {\n\t\t\t_reqAnimFrame = window[a[i] + \"RequestAnimationFrame\"];\n\t\t\t_cancelAnimFrame = window[a[i] + \"CancelAnimationFrame\"] || window[a[i] + \"CancelRequestAnimationFrame\"];\n\t\t}\n\n\t\t_class(\"Ticker\", function(fps, useRAF) {\n\t\t\tvar _self = this,\n\t\t\t\t_startTime = _getTime(),\n\t\t\t\t_useRAF = (useRAF !== false && _reqAnimFrame) ? \"auto\" : false,\n\t\t\t\t_lagThreshold = 500,\n\t\t\t\t_adjustedLag = 33,\n\t\t\t\t_tickWord = \"tick\", //helps reduce gc burden\n\t\t\t\t_fps, _req, _id, _gap, _nextTime,\n\t\t\t\t_tick = function(manual) {\n\t\t\t\t\tvar elapsed = _getTime() - _lastUpdate,\n\t\t\t\t\t\toverlap, dispatch;\n\t\t\t\t\tif (elapsed > _lagThreshold) {\n\t\t\t\t\t\t_startTime += elapsed - _adjustedLag;\n\t\t\t\t\t}\n\t\t\t\t\t_lastUpdate += elapsed;\n\t\t\t\t\t_self.time = (_lastUpdate - _startTime) / 1000;\n\t\t\t\t\toverlap = _self.time - _nextTime;\n\t\t\t\t\tif (!_fps || overlap > 0 || manual === true) {\n\t\t\t\t\t\t_self.frame++;\n\t\t\t\t\t\t_nextTime += overlap + (overlap >= _gap ? 0.004 : _gap - overlap);\n\t\t\t\t\t\tdispatch = true;\n\t\t\t\t\t}\n\t\t\t\t\tif (manual !== true) { //make sure the request is made before we dispatch the \"tick\" event so that timing is maintained. Otherwise, if processing the \"tick\" requires a bunch of time (like 15ms) and we're using a setTimeout() that's based on 16.7ms, it'd technically take 31.7ms between frames otherwise.\n\t\t\t\t\t\t_id = _req(_tick);\n\t\t\t\t\t}\n\t\t\t\t\tif (dispatch) {\n\t\t\t\t\t\t_self.dispatchEvent(_tickWord);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\tEventDispatcher.call(_self);\n\t\t\t_self.time = _self.frame = 0;\n\t\t\t_self.tick = function() {\n\t\t\t\t_tick(true);\n\t\t\t};\n\n\t\t\t_self.lagSmoothing = function(threshold, adjustedLag) {\n\t\t\t\tif (!arguments.length) { //if lagSmoothing() is called with no arguments, treat it like a getter that returns a boolean indicating if it's enabled or not. This is purposely undocumented and is for internal use.\n\t\t\t\t\treturn (_lagThreshold < 1 / _tinyNum);\n\t\t\t\t}\n\t\t\t\t_lagThreshold = threshold || (1 / _tinyNum); //zero should be interpreted as basically unlimited\n\t\t\t\t_adjustedLag = Math.min(adjustedLag, _lagThreshold, 0);\n\t\t\t};\n\n\t\t\t_self.sleep = function() {\n\t\t\t\tif (_id == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (!_useRAF || !_cancelAnimFrame) {\n\t\t\t\t\tclearTimeout(_id);\n\t\t\t\t} else {\n\t\t\t\t\t_cancelAnimFrame(_id);\n\t\t\t\t}\n\t\t\t\t_req = _emptyFunc;\n\t\t\t\t_id = null;\n\t\t\t\tif (_self === _ticker) {\n\t\t\t\t\t_tickerActive = false;\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t_self.wake = function(seamless) {\n\t\t\t\tif (_id !== null) {\n\t\t\t\t\t_self.sleep();\n\t\t\t\t} else if (seamless) {\n\t\t\t\t\t_startTime += -_lastUpdate + (_lastUpdate = _getTime());\n\t\t\t\t} else if (_self.frame > 10) { //don't trigger lagSmoothing if we're just waking up, and make sure that at least 10 frames have elapsed because of the iOS bug that we work around below with the 1.5-second setTimout().\n\t\t\t\t\t_lastUpdate = _getTime() - _lagThreshold + 5;\n\t\t\t\t}\n\t\t\t\t_req = (_fps === 0) ? _emptyFunc : (!_useRAF || !_reqAnimFrame) ? function(f) { return setTimeout(f, ((_nextTime - _self.time) * 1000 + 1) | 0); } : _reqAnimFrame;\n\t\t\t\tif (_self === _ticker) {\n\t\t\t\t\t_tickerActive = true;\n\t\t\t\t}\n\t\t\t\t_tick(2);\n\t\t\t};\n\n\t\t\t_self.fps = function(value) {\n\t\t\t\tif (!arguments.length) {\n\t\t\t\t\treturn _fps;\n\t\t\t\t}\n\t\t\t\t_fps = value;\n\t\t\t\t_gap = 1 / (_fps || 60);\n\t\t\t\t_nextTime = this.time + _gap;\n\t\t\t\t_self.wake();\n\t\t\t};\n\n\t\t\t_self.useRAF = function(value) {\n\t\t\t\tif (!arguments.length) {\n\t\t\t\t\treturn _useRAF;\n\t\t\t\t}\n\t\t\t\t_self.sleep();\n\t\t\t\t_useRAF = value;\n\t\t\t\t_self.fps(_fps);\n\t\t\t};\n\t\t\t_self.fps(fps);\n\n\t\t\t//a bug in iOS 6 Safari occasionally prevents the requestAnimationFrame from working initially, so we use a 1.5-second timeout that automatically falls back to setTimeout() if it senses this condition.\n\t\t\tsetTimeout(function() {\n\t\t\t\tif (_useRAF === \"auto\" && _self.frame < 5 && (_doc || {}).visibilityState !== \"hidden\") {\n\t\t\t\t\t_self.useRAF(false);\n\t\t\t\t}\n\t\t\t}, 1500);\n\t\t});\n\n\t\tp = gs.Ticker.prototype = new gs.events.EventDispatcher();\n\t\tp.constructor = gs.Ticker;\n\n\n/*\n * ----------------------------------------------------------------\n * Animation\n * ----------------------------------------------------------------\n */\n\t\tvar Animation = _class(\"core.Animation\", function(duration, vars) {\n\t\t\t\tthis.vars = vars = vars || {};\n\t\t\t\tthis._duration = this._totalDuration = duration || 0;\n\t\t\t\tthis._delay = Number(vars.delay) || 0;\n\t\t\t\tthis._timeScale = 1;\n\t\t\t\tthis._active = (vars.immediateRender === true);\n\t\t\t\tthis.data = vars.data;\n\t\t\t\tthis._reversed = (vars.reversed === true);\n\n\t\t\t\tif (!_rootTimeline) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (!_tickerActive) { //some browsers (like iOS 6 Safari) shut down JavaScript execution when the tab is disabled and they [occasionally] neglect to start up requestAnimationFrame again when returning - this code ensures that the engine starts up again properly.\n\t\t\t\t\t_ticker.wake();\n\t\t\t\t}\n\n\t\t\t\tvar tl = this.vars.useFrames ? _rootFramesTimeline : _rootTimeline;\n\t\t\t\ttl.add(this, tl._time);\n\n\t\t\t\tif (this.vars.paused) {\n\t\t\t\t\tthis.paused(true);\n\t\t\t\t}\n\t\t\t});\n\n\t\t_ticker = Animation.ticker = new gs.Ticker();\n\t\tp = Animation.prototype;\n\t\tp._dirty = p._gc = p._initted = p._paused = false;\n\t\tp._totalTime = p._time = 0;\n\t\tp._rawPrevTime = -1;\n\t\tp._next = p._last = p._onUpdate = p._timeline = p.timeline = null;\n\t\tp._paused = false;\n\n\n\t\t//some browsers (like iOS) occasionally drop the requestAnimationFrame event when the user switches to a different tab and then comes back again, so we use a 2-second setTimeout() to sense if/when that condition occurs and then wake() the ticker.\n\t\tvar _checkTimeout = function() {\n\t\t\t\tif (_tickerActive && _getTime() - _lastUpdate > 2000 && ((_doc || {}).visibilityState !== \"hidden\" || !_ticker.lagSmoothing())) { //note: if the tab is hidden, we should still wake if lagSmoothing has been disabled.\n\t\t\t\t\t_ticker.wake();\n\t\t\t\t}\n\t\t\t\tvar t = setTimeout(_checkTimeout, 2000);\n\t\t\t\tif (t.unref) {\n\t\t\t\t\t// allows a node process to exit even if the timeout’s callback hasn't been invoked. Without it, the node process could hang as this function is called every two seconds.\n\t\t\t\t\tt.unref();\n\t\t\t\t}\n\t\t\t};\n\t\t_checkTimeout();\n\n\n\t\tp.play = function(from, suppressEvents) {\n\t\t\tif (from != null) {\n\t\t\t\tthis.seek(from, suppressEvents);\n\t\t\t}\n\t\t\treturn this.reversed(false).paused(false);\n\t\t};\n\n\t\tp.pause = function(atTime, suppressEvents) {\n\t\t\tif (atTime != null) {\n\t\t\t\tthis.seek(atTime, suppressEvents);\n\t\t\t}\n\t\t\treturn this.paused(true);\n\t\t};\n\n\t\tp.resume = function(from, suppressEvents) {\n\t\t\tif (from != null) {\n\t\t\t\tthis.seek(from, suppressEvents);\n\t\t\t}\n\t\t\treturn this.paused(false);\n\t\t};\n\n\t\tp.seek = function(time, suppressEvents) {\n\t\t\treturn this.totalTime(Number(time), suppressEvents !== false);\n\t\t};\n\n\t\tp.restart = function(includeDelay, suppressEvents) {\n\t\t\treturn this.reversed(false).paused(false).totalTime(includeDelay ? -this._delay : 0, (suppressEvents !== false), true);\n\t\t};\n\n\t\tp.reverse = function(from, suppressEvents) {\n\t\t\tif (from != null) {\n\t\t\t\tthis.seek((from || this.totalDuration()), suppressEvents);\n\t\t\t}\n\t\t\treturn this.reversed(true).paused(false);\n\t\t};\n\n\t\tp.render = function(time, suppressEvents, force) {\n\t\t\t//stub - we override this method in subclasses.\n\t\t};\n\n\t\tp.invalidate = function() {\n\t\t\tthis._time = this._totalTime = 0;\n\t\t\tthis._initted = this._gc = false;\n\t\t\tthis._rawPrevTime = -1;\n\t\t\tif (this._gc || !this.timeline) {\n\t\t\t\tthis._enabled(true);\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp.isActive = function() {\n\t\t\tvar tl = this._timeline, //the 2 root timelines won't have a _timeline; they're always active.\n\t\t\t\tstartTime = this._startTime,\n\t\t\t\trawTime;\n\t\t\treturn (!tl || (!this._gc && !this._paused && tl.isActive() && (rawTime = tl.rawTime(true)) >= startTime && rawTime < startTime + this.totalDuration() / this._timeScale - 0.0000001));\n\t\t};\n\n\t\tp._enabled = function (enabled, ignoreTimeline) {\n\t\t\tif (!_tickerActive) {\n\t\t\t\t_ticker.wake();\n\t\t\t}\n\t\t\tthis._gc = !enabled;\n\t\t\tthis._active = this.isActive();\n\t\t\tif (ignoreTimeline !== true) {\n\t\t\t\tif (enabled && !this.timeline) {\n\t\t\t\t\tthis._timeline.add(this, this._startTime - this._delay);\n\t\t\t\t} else if (!enabled && this.timeline) {\n\t\t\t\t\tthis._timeline._remove(this, true);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\n\t\tp._kill = function(vars, target) {\n\t\t\treturn this._enabled(false, false);\n\t\t};\n\n\t\tp.kill = function(vars, target) {\n\t\t\tthis._kill(vars, target);\n\t\t\treturn this;\n\t\t};\n\n\t\tp._uncache = function(includeSelf) {\n\t\t\tvar tween = includeSelf ? this : this.timeline;\n\t\t\twhile (tween) {\n\t\t\t\ttween._dirty = true;\n\t\t\t\ttween = tween.timeline;\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp._swapSelfInParams = function(params) {\n\t\t\tvar i = params.length,\n\t\t\t\tcopy = params.concat();\n\t\t\twhile (--i > -1) {\n\t\t\t\tif (params[i] === \"{self}\") {\n\t\t\t\t\tcopy[i] = this;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn copy;\n\t\t};\n\n\t\tp._callback = function(type) {\n\t\t\tvar v = this.vars,\n\t\t\t\tcallback = v[type],\n\t\t\t\tparams = v[type + \"Params\"],\n\t\t\t\tscope = v[type + \"Scope\"] || v.callbackScope || this,\n\t\t\t\tl = params ? params.length : 0;\n\t\t\tswitch (l) { //speed optimization; call() is faster than apply() so use it when there are only a few parameters (which is by far most common). Previously we simply did var v = this.vars; v[type].apply(v[type + \"Scope\"] || v.callbackScope || this, v[type + \"Params\"] || _blankArray);\n\t\t\t\tcase 0: callback.call(scope); break;\n\t\t\t\tcase 1: callback.call(scope, params[0]); break;\n\t\t\t\tcase 2: callback.call(scope, params[0], params[1]); break;\n\t\t\t\tdefault: callback.apply(scope, params);\n\t\t\t}\n\t\t};\n\n//----Animation getters/setters --------------------------------------------------------\n\n\t\tp.eventCallback = function(type, callback, params, scope) {\n\t\t\tif ((type || \"\").substr(0,2) === \"on\") {\n\t\t\t\tvar v = this.vars;\n\t\t\t\tif (arguments.length === 1) {\n\t\t\t\t\treturn v[type];\n\t\t\t\t}\n\t\t\t\tif (callback == null) {\n\t\t\t\t\tdelete v[type];\n\t\t\t\t} else {\n\t\t\t\t\tv[type] = callback;\n\t\t\t\t\tv[type + \"Params\"] = (_isArray(params) && params.join(\"\").indexOf(\"{self}\") !== -1) ? this._swapSelfInParams(params) : params;\n\t\t\t\t\tv[type + \"Scope\"] = scope;\n\t\t\t\t}\n\t\t\t\tif (type === \"onUpdate\") {\n\t\t\t\t\tthis._onUpdate = callback;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp.delay = function(value) {\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn this._delay;\n\t\t\t}\n\t\t\tif (this._timeline.smoothChildTiming) {\n\t\t\t\tthis.startTime( this._startTime + value - this._delay );\n\t\t\t}\n\t\t\tthis._delay = value;\n\t\t\treturn this;\n\t\t};\n\n\t\tp.duration = function(value) {\n\t\t\tif (!arguments.length) {\n\t\t\t\tthis._dirty = false;\n\t\t\t\treturn this._duration;\n\t\t\t}\n\t\t\tthis._duration = this._totalDuration = value;\n\t\t\tthis._uncache(true); //true in case it's a TweenMax or TimelineMax that has a repeat - we'll need to refresh the totalDuration.\n\t\t\tif (this._timeline.smoothChildTiming) if (this._time > 0) if (this._time < this._duration) if (value !== 0) {\n\t\t\t\tthis.totalTime(this._totalTime * (value / this._duration), true);\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp.totalDuration = function(value) {\n\t\t\tthis._dirty = false;\n\t\t\treturn (!arguments.length) ? this._totalDuration : this.duration(value);\n\t\t};\n\n\t\tp.time = function(value, suppressEvents) {\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn this._time;\n\t\t\t}\n\t\t\tif (this._dirty) {\n\t\t\t\tthis.totalDuration();\n\t\t\t}\n\t\t\treturn this.totalTime((value > this._duration) ? this._duration : value, suppressEvents);\n\t\t};\n\n\t\tp.totalTime = function(time, suppressEvents, uncapped) {\n\t\t\tif (!_tickerActive) {\n\t\t\t\t_ticker.wake();\n\t\t\t}\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn this._totalTime;\n\t\t\t}\n\t\t\tif (this._timeline) {\n\t\t\t\tif (time < 0 && !uncapped) {\n\t\t\t\t\ttime += this.totalDuration();\n\t\t\t\t}\n\t\t\t\tif (this._timeline.smoothChildTiming) {\n\t\t\t\t\tif (this._dirty) {\n\t\t\t\t\t\tthis.totalDuration();\n\t\t\t\t\t}\n\t\t\t\t\tvar totalDuration = this._totalDuration,\n\t\t\t\t\t\ttl = this._timeline;\n\t\t\t\t\tif (time > totalDuration && !uncapped) {\n\t\t\t\t\t\ttime = totalDuration;\n\t\t\t\t\t}\n\t\t\t\t\tthis._startTime = (this._paused ? this._pauseTime : tl._time) - ((!this._reversed ? time : totalDuration - time) / this._timeScale);\n\t\t\t\t\tif (!tl._dirty) { //for performance improvement. If the parent's cache is already dirty, it already took care of marking the ancestors as dirty too, so skip the function call here.\n\t\t\t\t\t\tthis._uncache(false);\n\t\t\t\t\t}\n\t\t\t\t\t//in case any of the ancestor timelines had completed but should now be enabled, we should reset their totalTime() which will also ensure that they're lined up properly and enabled. Skip for animations that are on the root (wasteful). Example: a TimelineLite.exportRoot() is performed when there's a paused tween on the root, the export will not complete until that tween is unpaused, but imagine a child gets restarted later, after all [unpaused] tweens have completed. The startTime of that child would get pushed out, but one of the ancestors may have completed.\n\t\t\t\t\tif (tl._timeline) {\n\t\t\t\t\t\twhile (tl._timeline) {\n\t\t\t\t\t\t\tif (tl._timeline._time !== (tl._startTime + tl._totalTime) / tl._timeScale) {\n\t\t\t\t\t\t\t\ttl.totalTime(tl._totalTime, true);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttl = tl._timeline;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (this._gc) {\n\t\t\t\t\tthis._enabled(true, false);\n\t\t\t\t}\n\t\t\t\tif (this._totalTime !== time || this._duration === 0) {\n\t\t\t\t\tif (_lazyTweens.length) {\n\t\t\t\t\t\t_lazyRender();\n\t\t\t\t\t}\n\t\t\t\t\tthis.render(time, suppressEvents, false);\n\t\t\t\t\tif (_lazyTweens.length) { //in case rendering caused any tweens to lazy-init, we should render them because typically when someone calls seek() or time() or progress(), they expect an immediate render.\n\t\t\t\t\t\t_lazyRender();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp.progress = p.totalProgress = function(value, suppressEvents) {\n\t\t\tvar duration = this.duration();\n\t\t\treturn (!arguments.length) ? (duration ? this._time / duration : this.ratio) : this.totalTime(duration * value, suppressEvents);\n\t\t};\n\n\t\tp.startTime = function(value) {\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn this._startTime;\n\t\t\t}\n\t\t\tif (value !== this._startTime) {\n\t\t\t\tthis._startTime = value;\n\t\t\t\tif (this.timeline) if (this.timeline._sortChildren) {\n\t\t\t\t\tthis.timeline.add(this, value - this._delay); //ensures that any necessary re-sequencing of Animations in the timeline occurs to make sure the rendering order is correct.\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp.endTime = function(includeRepeats) {\n\t\t\treturn this._startTime + ((includeRepeats != false) ? this.totalDuration() : this.duration()) / this._timeScale;\n\t\t};\n\n\t\tp.timeScale = function(value) {\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn this._timeScale;\n\t\t\t}\n\t\t\tvar pauseTime, t;\n\t\t\tvalue = value || _tinyNum; //can't allow zero because it'll throw the math off\n\t\t\tif (this._timeline && this._timeline.smoothChildTiming) {\n\t\t\t\tpauseTime = this._pauseTime;\n\t\t\t\tt = (pauseTime || pauseTime === 0) ? pauseTime : this._timeline.totalTime();\n\t\t\t\tthis._startTime = t - ((t - this._startTime) * this._timeScale / value);\n\t\t\t}\n\t\t\tthis._timeScale = value;\n\t\t\tt = this.timeline;\n\t\t\twhile (t && t.timeline) { //must update the duration/totalDuration of all ancestor timelines immediately in case in the middle of a render loop, one tween alters another tween's timeScale which shoves its startTime before 0, forcing the parent timeline to shift around and shiftChildren() which could affect that next tween's render (startTime). Doesn't matter for the root timeline though.\n\t\t\t\tt._dirty = true;\n\t\t\t\tt.totalDuration();\n\t\t\t\tt = t.timeline;\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp.reversed = function(value) {\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn this._reversed;\n\t\t\t}\n\t\t\tif (value != this._reversed) {\n\t\t\t\tthis._reversed = value;\n\t\t\t\tthis.totalTime(((this._timeline && !this._timeline.smoothChildTiming) ? this.totalDuration() - this._totalTime : this._totalTime), true);\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp.paused = function(value) {\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn this._paused;\n\t\t\t}\n\t\t\tvar tl = this._timeline,\n\t\t\t\traw, elapsed;\n\t\t\tif (value != this._paused) if (tl) {\n\t\t\t\tif (!_tickerActive && !value) {\n\t\t\t\t\t_ticker.wake();\n\t\t\t\t}\n\t\t\t\traw = tl.rawTime();\n\t\t\t\telapsed = raw - this._pauseTime;\n\t\t\t\tif (!value && tl.smoothChildTiming) {\n\t\t\t\t\tthis._startTime += elapsed;\n\t\t\t\t\tthis._uncache(false);\n\t\t\t\t}\n\t\t\t\tthis._pauseTime = value ? raw : null;\n\t\t\t\tthis._paused = value;\n\t\t\t\tthis._active = this.isActive();\n\t\t\t\tif (!value && elapsed !== 0 && this._initted && this.duration()) {\n\t\t\t\t\traw = tl.smoothChildTiming ? this._totalTime : (raw - this._startTime) / this._timeScale;\n\t\t\t\t\tthis.render(raw, (raw === this._totalTime), true); //in case the target's properties changed via some other tween or manual update by the user, we should force a render.\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this._gc && !value) {\n\t\t\t\tthis._enabled(true, false);\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\n/*\n * ----------------------------------------------------------------\n * SimpleTimeline\n * ----------------------------------------------------------------\n */\n\t\tvar SimpleTimeline = _class(\"core.SimpleTimeline\", function(vars) {\n\t\t\tAnimation.call(this, 0, vars);\n\t\t\tthis.autoRemoveChildren = this.smoothChildTiming = true;\n\t\t});\n\n\t\tp = SimpleTimeline.prototype = new Animation();\n\t\tp.constructor = SimpleTimeline;\n\t\tp.kill()._gc = false;\n\t\tp._first = p._last = p._recent = null;\n\t\tp._sortChildren = false;\n\n\t\tp.add = p.insert = function(child, position, align, stagger) {\n\t\t\tvar prevTween, st;\n\t\t\tchild._startTime = Number(position || 0) + child._delay;\n\t\t\tif (child._paused) if (this !== child._timeline) { //we only adjust the _pauseTime if it wasn't in this timeline already. Remember, sometimes a tween will be inserted again into the same timeline when its startTime is changed so that the tweens in the TimelineLite/Max are re-ordered properly in the linked list (so everything renders in the proper order).\n\t\t\t\tchild._pauseTime = child._startTime + ((this.rawTime() - child._startTime) / child._timeScale);\n\t\t\t}\n\t\t\tif (child.timeline) {\n\t\t\t\tchild.timeline._remove(child, true); //removes from existing timeline so that it can be properly added to this one.\n\t\t\t}\n\t\t\tchild.timeline = child._timeline = this;\n\t\t\tif (child._gc) {\n\t\t\t\tchild._enabled(true, true);\n\t\t\t}\n\t\t\tprevTween = this._last;\n\t\t\tif (this._sortChildren) {\n\t\t\t\tst = child._startTime;\n\t\t\t\twhile (prevTween && prevTween._startTime > st) {\n\t\t\t\t\tprevTween = prevTween._prev;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (prevTween) {\n\t\t\t\tchild._next = prevTween._next;\n\t\t\t\tprevTween._next = child;\n\t\t\t} else {\n\t\t\t\tchild._next = this._first;\n\t\t\t\tthis._first = child;\n\t\t\t}\n\t\t\tif (child._next) {\n\t\t\t\tchild._next._prev = child;\n\t\t\t} else {\n\t\t\t\tthis._last = child;\n\t\t\t}\n\t\t\tchild._prev = prevTween;\n\t\t\tthis._recent = child;\n\t\t\tif (this._timeline) {\n\t\t\t\tthis._uncache(true);\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp._remove = function(tween, skipDisable) {\n\t\t\tif (tween.timeline === this) {\n\t\t\t\tif (!skipDisable) {\n\t\t\t\t\ttween._enabled(false, true);\n\t\t\t\t}\n\n\t\t\t\tif (tween._prev) {\n\t\t\t\t\ttween._prev._next = tween._next;\n\t\t\t\t} else if (this._first === tween) {\n\t\t\t\t\tthis._first = tween._next;\n\t\t\t\t}\n\t\t\t\tif (tween._next) {\n\t\t\t\t\ttween._next._prev = tween._prev;\n\t\t\t\t} else if (this._last === tween) {\n\t\t\t\t\tthis._last = tween._prev;\n\t\t\t\t}\n\t\t\t\ttween._next = tween._prev = tween.timeline = null;\n\t\t\t\tif (tween === this._recent) {\n\t\t\t\t\tthis._recent = this._last;\n\t\t\t\t}\n\n\t\t\t\tif (this._timeline) {\n\t\t\t\t\tthis._uncache(true);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp.render = function(time, suppressEvents, force) {\n\t\t\tvar tween = this._first,\n\t\t\t\tnext;\n\t\t\tthis._totalTime = this._time = this._rawPrevTime = time;\n\t\t\twhile (tween) {\n\t\t\t\tnext = tween._next; //record it here because the value could change after rendering...\n\t\t\t\tif (tween._active || (time >= tween._startTime && !tween._paused && !tween._gc)) {\n\t\t\t\t\tif (!tween._reversed) {\n\t\t\t\t\t\ttween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttween.render(((!tween._dirty) ? tween._totalDuration : tween.totalDuration()) - ((time - tween._startTime) * tween._timeScale), suppressEvents, force);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttween = next;\n\t\t\t}\n\t\t};\n\n\t\tp.rawTime = function() {\n\t\t\tif (!_tickerActive) {\n\t\t\t\t_ticker.wake();\n\t\t\t}\n\t\t\treturn this._totalTime;\n\t\t};\n\n/*\n * ----------------------------------------------------------------\n * TweenLite\n * ----------------------------------------------------------------\n */\n\t\tvar TweenLite = _class(\"TweenLite\", function(target, duration, vars) {\n\t\t\t\tAnimation.call(this, duration, vars);\n\t\t\t\tthis.render = TweenLite.prototype.render; //speed optimization (avoid prototype lookup on this \"hot\" method)\n\n\t\t\t\tif (target == null) {\n\t\t\t\t\tthrow \"Cannot tween a null target.\";\n\t\t\t\t}\n\n\t\t\t\tthis.target = target = (typeof(target) !== \"string\") ? target : TweenLite.selector(target) || target;\n\n\t\t\t\tvar isSelector = (target.jquery || (target.length && target !== window && target[0] && (target[0] === window || (target[0].nodeType && target[0].style && !target.nodeType)))),\n\t\t\t\t\toverwrite = this.vars.overwrite,\n\t\t\t\t\ti, targ, targets;\n\n\t\t\t\tthis._overwrite = overwrite = (overwrite == null) ? _overwriteLookup[TweenLite.defaultOverwrite] : (typeof(overwrite) === \"number\") ? overwrite >> 0 : _overwriteLookup[overwrite];\n\n\t\t\t\tif ((isSelector || target instanceof Array || (target.push && _isArray(target))) && typeof(target[0]) !== \"number\") {\n\t\t\t\t\tthis._targets = targets = _slice(target);  //don't use Array.prototype.slice.call(target, 0) because that doesn't work in IE8 with a NodeList that's returned by querySelectorAll()\n\t\t\t\t\tthis._propLookup = [];\n\t\t\t\t\tthis._siblings = [];\n\t\t\t\t\tfor (i = 0; i < targets.length; i++) {\n\t\t\t\t\t\ttarg = targets[i];\n\t\t\t\t\t\tif (!targ) {\n\t\t\t\t\t\t\ttargets.splice(i--, 1);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t} else if (typeof(targ) === \"string\") {\n\t\t\t\t\t\t\ttarg = targets[i--] = TweenLite.selector(targ); //in case it's an array of strings\n\t\t\t\t\t\t\tif (typeof(targ) === \"string\") {\n\t\t\t\t\t\t\t\ttargets.splice(i+1, 1); //to avoid an endless loop (can't imagine why the selector would return a string, but just in case)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t} else if (targ.length && targ !== window && targ[0] && (targ[0] === window || (targ[0].nodeType && targ[0].style && !targ.nodeType))) { //in case the user is passing in an array of selector objects (like jQuery objects), we need to check one more level and pull things out if necessary. Also note that <select> elements pass all the criteria regarding length and the first child having style, so we must also check to ensure the target isn't an HTML node itself.\n\t\t\t\t\t\t\ttargets.splice(i--, 1);\n\t\t\t\t\t\t\tthis._targets = targets = targets.concat(_slice(targ));\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._siblings[i] = _register(targ, this, false);\n\t\t\t\t\t\tif (overwrite === 1) if (this._siblings[i].length > 1) {\n\t\t\t\t\t\t\t_applyOverwrite(targ, this, null, 1, this._siblings[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tthis._propLookup = {};\n\t\t\t\t\tthis._siblings = _register(target, this, false);\n\t\t\t\t\tif (overwrite === 1) if (this._siblings.length > 1) {\n\t\t\t\t\t\t_applyOverwrite(target, this, null, 1, this._siblings);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (this.vars.immediateRender || (duration === 0 && this._delay === 0 && this.vars.immediateRender !== false)) {\n\t\t\t\t\tthis._time = -_tinyNum; //forces a render without having to set the render() \"force\" parameter to true because we want to allow lazying by default (using the \"force\" parameter always forces an immediate full render)\n\t\t\t\t\tthis.render(Math.min(0, -this._delay)); //in case delay is negative\n\t\t\t\t}\n\t\t\t}, true),\n\t\t\t_isSelector = function(v) {\n\t\t\t\treturn (v && v.length && v !== window && v[0] && (v[0] === window || (v[0].nodeType && v[0].style && !v.nodeType))); //we cannot check \"nodeType\" if the target is window from within an iframe, otherwise it will trigger a security error in some browsers like Firefox.\n\t\t\t},\n\t\t\t_autoCSS = function(vars, target) {\n\t\t\t\tvar css = {},\n\t\t\t\t\tp;\n\t\t\t\tfor (p in vars) {\n\t\t\t\t\tif (!_reservedProps[p] && (!(p in target) || p === \"transform\" || p === \"x\" || p === \"y\" || p === \"width\" || p === \"height\" || p === \"className\" || p === \"border\") && (!_plugins[p] || (_plugins[p] && _plugins[p]._autoCSS))) { //note: <img> elements contain read-only \"x\" and \"y\" properties. We should also prioritize editing css width/height rather than the element's properties.\n\t\t\t\t\t\tcss[p] = vars[p];\n\t\t\t\t\t\tdelete vars[p];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tvars.css = css;\n\t\t\t};\n\n\t\tp = TweenLite.prototype = new Animation();\n\t\tp.constructor = TweenLite;\n\t\tp.kill()._gc = false;\n\n//----TweenLite defaults, overwrite management, and root updates ----------------------------------------------------\n\n\t\tp.ratio = 0;\n\t\tp._firstPT = p._targets = p._overwrittenProps = p._startAt = null;\n\t\tp._notifyPluginsOfEnabled = p._lazy = false;\n\n\t\tTweenLite.version = \"1.20.4\";\n\t\tTweenLite.defaultEase = p._ease = new Ease(null, null, 1, 1);\n\t\tTweenLite.defaultOverwrite = \"auto\";\n\t\tTweenLite.ticker = _ticker;\n\t\tTweenLite.autoSleep = 120;\n\t\tTweenLite.lagSmoothing = function(threshold, adjustedLag) {\n\t\t\t_ticker.lagSmoothing(threshold, adjustedLag);\n\t\t};\n\n\t\tTweenLite.selector = window.$ || window.jQuery || function(e) {\n\t\t\tvar selector = window.$ || window.jQuery;\n\t\t\tif (selector) {\n\t\t\t\tTweenLite.selector = selector;\n\t\t\t\treturn selector(e);\n\t\t\t}\n\t\t\treturn (typeof(_doc) === \"undefined\") ? e : (_doc.querySelectorAll ? _doc.querySelectorAll(e) : _doc.getElementById((e.charAt(0) === \"#\") ? e.substr(1) : e));\n\t\t};\n\n\t\tvar _lazyTweens = [],\n\t\t\t_lazyLookup = {},\n\t\t\t_numbersExp = /(?:(-|-=|\\+=)?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[0-9]/ig,\n\t\t\t_relExp = /[\\+-]=-?[\\.\\d]/,\n\t\t\t//_nonNumbersExp = /(?:([\\-+](?!(\\d|=)))|[^\\d\\-+=e]|(e(?![\\-+][\\d])))+/ig,\n\t\t\t_setRatio = function(v) {\n\t\t\t\tvar pt = this._firstPT,\n\t\t\t\t\tmin = 0.000001,\n\t\t\t\t\tval;\n\t\t\t\twhile (pt) {\n\t\t\t\t\tval = !pt.blob ? pt.c * v + pt.s : (v === 1 && this.end != null) ? this.end : v ? this.join(\"\") : this.start;\n\t\t\t\t\tif (pt.m) {\n\t\t\t\t\t\tval = pt.m(val, this._target || pt.t);\n\t\t\t\t\t} else if (val < min) if (val > -min && !pt.blob) { //prevents issues with converting very small numbers to strings in the browser\n\t\t\t\t\t\tval = 0;\n\t\t\t\t\t}\n\t\t\t\t\tif (!pt.f) {\n\t\t\t\t\t\tpt.t[pt.p] = val;\n\t\t\t\t\t} else if (pt.fp) {\n\t\t\t\t\t\tpt.t[pt.p](pt.fp, val);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpt.t[pt.p](val);\n\t\t\t\t\t}\n\t\t\t\t\tpt = pt._next;\n\t\t\t\t}\n\t\t\t},\n\t\t\t//compares two strings (start/end), finds the numbers that are different and spits back an array representing the whole value but with the changing values isolated as elements. For example, \"rgb(0,0,0)\" and \"rgb(100,50,0)\" would become [\"rgb(\", 0, \",\", 50, \",0)\"]. Notice it merges the parts that are identical (performance optimization). The array also has a linked list of PropTweens attached starting with _firstPT that contain the tweening data (t, p, s, c, f, etc.). It also stores the starting value as a \"start\" property so that we can revert to it if/when necessary, like when a tween rewinds fully. If the quantity of numbers differs between the start and end, it will always prioritize the end value(s). The pt parameter is optional - it's for a PropTween that will be appended to the end of the linked list and is typically for actually setting the value after all of the elements have been updated (with array.join(\"\")).\n\t\t\t_blobDif = function(start, end, filter, pt) {\n\t\t\t\tvar a = [],\n\t\t\t\t\tcharIndex = 0,\n\t\t\t\t\ts = \"\",\n\t\t\t\t\tcolor = 0,\n\t\t\t\t\tstartNums, endNums, num, i, l, nonNumbers, currentNum;\n\t\t\t\ta.start = start;\n\t\t\t\ta.end = end;\n\t\t\t\tstart = a[0] = start + \"\"; //ensure values are strings\n\t\t\t\tend = a[1] = end + \"\";\n\t\t\t\tif (filter) {\n\t\t\t\t\tfilter(a); //pass an array with the starting and ending values and let the filter do whatever it needs to the values.\n\t\t\t\t\tstart = a[0];\n\t\t\t\t\tend = a[1];\n\t\t\t\t}\n\t\t\t\ta.length = 0;\n\t\t\t\tstartNums = start.match(_numbersExp) || [];\n\t\t\t\tendNums = end.match(_numbersExp) || [];\n\t\t\t\tif (pt) {\n\t\t\t\t\tpt._next = null;\n\t\t\t\t\tpt.blob = 1;\n\t\t\t\t\ta._firstPT = a._applyPT = pt; //apply last in the linked list (which means inserting it first)\n\t\t\t\t}\n\t\t\t\tl = endNums.length;\n\t\t\t\tfor (i = 0; i < l; i++) {\n\t\t\t\t\tcurrentNum = endNums[i];\n\t\t\t\t\tnonNumbers = end.substr(charIndex, end.indexOf(currentNum, charIndex)-charIndex);\n\t\t\t\t\ts += (nonNumbers || !i) ? nonNumbers : \",\"; //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.\n\t\t\t\t\tcharIndex += nonNumbers.length;\n\t\t\t\t\tif (color) { //sense rgba() values and round them.\n\t\t\t\t\t\tcolor = (color + 1) % 5;\n\t\t\t\t\t} else if (nonNumbers.substr(-5) === \"rgba(\") {\n\t\t\t\t\t\tcolor = 1;\n\t\t\t\t\t}\n\t\t\t\t\tif (currentNum === startNums[i] || startNums.length <= i) {\n\t\t\t\t\t\ts += currentNum;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (s) {\n\t\t\t\t\t\t\ta.push(s);\n\t\t\t\t\t\t\ts = \"\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnum = parseFloat(startNums[i]);\n\t\t\t\t\t\ta.push(num);\n\t\t\t\t\t\ta._firstPT = {_next: a._firstPT, t:a, p: a.length-1, s:num, c:((currentNum.charAt(1) === \"=\") ? parseInt(currentNum.charAt(0) + \"1\", 10) * parseFloat(currentNum.substr(2)) : (parseFloat(currentNum) - num)) || 0, f:0, m:(color && color < 4) ? Math.round : 0};\n\t\t\t\t\t\t//note: we don't set _prev because we'll never need to remove individual PropTweens from this list.\n\t\t\t\t\t}\n\t\t\t\t\tcharIndex += currentNum.length;\n\t\t\t\t}\n\t\t\t\ts += end.substr(charIndex);\n\t\t\t\tif (s) {\n\t\t\t\t\ta.push(s);\n\t\t\t\t}\n\t\t\t\ta.setRatio = _setRatio;\n\t\t\t\tif (_relExp.test(end)) { //if the end string contains relative values, delete it so that on the final render (in _setRatio()), we don't actually set it to the string with += or -= characters (forces it to use the calculated value).\n\t\t\t\t\ta.end = null;\n\t\t\t\t}\n\t\t\t\treturn a;\n\t\t\t},\n\t\t\t//note: \"funcParam\" is only necessary for function-based getters/setters that require an extra parameter like getAttribute(\"width\") and setAttribute(\"width\", value). In this example, funcParam would be \"width\". Used by AttrPlugin for example.\n\t\t\t_addPropTween = function(target, prop, start, end, overwriteProp, mod, funcParam, stringFilter, index) {\n\t\t\t\tif (typeof(end) === \"function\") {\n\t\t\t\t\tend = end(index || 0, target);\n\t\t\t\t}\n\t\t\t\tvar type = typeof(target[prop]),\n\t\t\t\t\tgetterName = (type !== \"function\") ? \"\" : ((prop.indexOf(\"set\") || typeof(target[\"get\" + prop.substr(3)]) !== \"function\") ? prop : \"get\" + prop.substr(3)),\n\t\t\t\t\ts = (start !== \"get\") ? start : !getterName ? target[prop] : funcParam ? target[getterName](funcParam) : target[getterName](),\n\t\t\t\t\tisRelative = (typeof(end) === \"string\" && end.charAt(1) === \"=\"),\n\t\t\t\t\tpt = {t:target, p:prop, s:s, f:(type === \"function\"), pg:0, n:overwriteProp || prop, m:(!mod ? 0 : (typeof(mod) === \"function\") ? mod : Math.round), pr:0, c:isRelative ? parseInt(end.charAt(0) + \"1\", 10) * parseFloat(end.substr(2)) : (parseFloat(end) - s) || 0},\n\t\t\t\t\tblob;\n\n\t\t\t\tif (typeof(s) !== \"number\" || (typeof(end) !== \"number\" && !isRelative)) {\n\t\t\t\t\tif (funcParam || isNaN(s) || (!isRelative && isNaN(end)) || typeof(s) === \"boolean\" || typeof(end) === \"boolean\") {\n\t\t\t\t\t\t//a blob (string that has multiple numbers in it)\n\t\t\t\t\t\tpt.fp = funcParam;\n\t\t\t\t\t\tblob = _blobDif(s, (isRelative ? (parseFloat(pt.s) + pt.c) + (pt.s + \"\").replace(/[0-9\\-\\.]/g, \"\") : end), stringFilter || TweenLite.defaultStringFilter, pt);\n\t\t\t\t\t\tpt = {t: blob, p: \"setRatio\", s: 0, c: 1, f: 2, pg: 0, n: overwriteProp || prop, pr: 0, m: 0}; //\"2\" indicates it's a Blob property tween. Needed for RoundPropsPlugin for example.\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpt.s = parseFloat(s);\n\t\t\t\t\t\tif (!isRelative) {\n\t\t\t\t\t\t\tpt.c = (parseFloat(end) - pt.s) || 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pt.c) { //only add it to the linked list if there's a change.\n\t\t\t\t\tif ((pt._next = this._firstPT)) {\n\t\t\t\t\t\tpt._next._prev = pt;\n\t\t\t\t\t}\n\t\t\t\t\tthis._firstPT = pt;\n\t\t\t\t\treturn pt;\n\t\t\t\t}\n\t\t\t},\n\t\t\t_internals = TweenLite._internals = {isArray:_isArray, isSelector:_isSelector, lazyTweens:_lazyTweens, blobDif:_blobDif}, //gives us a way to expose certain private values to other GreenSock classes without contaminating tha main TweenLite object.\n\t\t\t_plugins = TweenLite._plugins = {},\n\t\t\t_tweenLookup = _internals.tweenLookup = {},\n\t\t\t_tweenLookupNum = 0,\n\t\t\t_reservedProps = _internals.reservedProps = {ease:1, delay:1, overwrite:1, onComplete:1, onCompleteParams:1, onCompleteScope:1, useFrames:1, runBackwards:1, startAt:1, onUpdate:1, onUpdateParams:1, onUpdateScope:1, onStart:1, onStartParams:1, onStartScope:1, onReverseComplete:1, onReverseCompleteParams:1, onReverseCompleteScope:1, onRepeat:1, onRepeatParams:1, onRepeatScope:1, easeParams:1, yoyo:1, immediateRender:1, repeat:1, repeatDelay:1, data:1, paused:1, reversed:1, autoCSS:1, lazy:1, onOverwrite:1, callbackScope:1, stringFilter:1, id:1, yoyoEase:1},\n\t\t\t_overwriteLookup = {none:0, all:1, auto:2, concurrent:3, allOnStart:4, preexisting:5, \"true\":1, \"false\":0},\n\t\t\t_rootFramesTimeline = Animation._rootFramesTimeline = new SimpleTimeline(),\n\t\t\t_rootTimeline = Animation._rootTimeline = new SimpleTimeline(),\n\t\t\t_nextGCFrame = 30,\n\t\t\t_lazyRender = _internals.lazyRender = function() {\n\t\t\t\tvar i = _lazyTweens.length,\n\t\t\t\t\ttween;\n\t\t\t\t_lazyLookup = {};\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\ttween = _lazyTweens[i];\n\t\t\t\t\tif (tween && tween._lazy !== false) {\n\t\t\t\t\t\ttween.render(tween._lazy[0], tween._lazy[1], true);\n\t\t\t\t\t\ttween._lazy = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t_lazyTweens.length = 0;\n\t\t\t};\n\n\t\t_rootTimeline._startTime = _ticker.time;\n\t\t_rootFramesTimeline._startTime = _ticker.frame;\n\t\t_rootTimeline._active = _rootFramesTimeline._active = true;\n\t\tsetTimeout(_lazyRender, 1); //on some mobile devices, there isn't a \"tick\" before code runs which means any lazy renders wouldn't run before the next official \"tick\".\n\n\t\tAnimation._updateRoot = TweenLite.render = function() {\n\t\t\t\tvar i, a, p;\n\t\t\t\tif (_lazyTweens.length) { //if code is run outside of the requestAnimationFrame loop, there may be tweens queued AFTER the engine refreshed, so we need to ensure any pending renders occur before we refresh again.\n\t\t\t\t\t_lazyRender();\n\t\t\t\t}\n\t\t\t\t_rootTimeline.render((_ticker.time - _rootTimeline._startTime) * _rootTimeline._timeScale, false, false);\n\t\t\t\t_rootFramesTimeline.render((_ticker.frame - _rootFramesTimeline._startTime) * _rootFramesTimeline._timeScale, false, false);\n\t\t\t\tif (_lazyTweens.length) {\n\t\t\t\t\t_lazyRender();\n\t\t\t\t}\n\t\t\t\tif (_ticker.frame >= _nextGCFrame) { //dump garbage every 120 frames or whatever the user sets TweenLite.autoSleep to\n\t\t\t\t\t_nextGCFrame = _ticker.frame + (parseInt(TweenLite.autoSleep, 10) || 120);\n\t\t\t\t\tfor (p in _tweenLookup) {\n\t\t\t\t\t\ta = _tweenLookup[p].tweens;\n\t\t\t\t\t\ti = a.length;\n\t\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\t\tif (a[i]._gc) {\n\t\t\t\t\t\t\t\ta.splice(i, 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (a.length === 0) {\n\t\t\t\t\t\t\tdelete _tweenLookup[p];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//if there are no more tweens in the root timelines, or if they're all paused, make the _timer sleep to reduce load on the CPU slightly\n\t\t\t\t\tp = _rootTimeline._first;\n\t\t\t\t\tif (!p || p._paused) if (TweenLite.autoSleep && !_rootFramesTimeline._first && _ticker._listeners.tick.length === 1) {\n\t\t\t\t\t\twhile (p && p._paused) {\n\t\t\t\t\t\t\tp = p._next;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!p) {\n\t\t\t\t\t\t\t_ticker.sleep();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t_ticker.addEventListener(\"tick\", Animation._updateRoot);\n\n\t\tvar _register = function(target, tween, scrub) {\n\t\t\t\tvar id = target._gsTweenID, a, i;\n\t\t\t\tif (!_tweenLookup[id || (target._gsTweenID = id = \"t\" + (_tweenLookupNum++))]) {\n\t\t\t\t\t_tweenLookup[id] = {target:target, tweens:[]};\n\t\t\t\t}\n\t\t\t\tif (tween) {\n\t\t\t\t\ta = _tweenLookup[id].tweens;\n\t\t\t\t\ta[(i = a.length)] = tween;\n\t\t\t\t\tif (scrub) {\n\t\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\t\tif (a[i] === tween) {\n\t\t\t\t\t\t\t\ta.splice(i, 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn _tweenLookup[id].tweens;\n\t\t\t},\n\t\t\t_onOverwrite = function(overwrittenTween, overwritingTween, target, killedProps) {\n\t\t\t\tvar func = overwrittenTween.vars.onOverwrite, r1, r2;\n\t\t\t\tif (func) {\n\t\t\t\t\tr1 = func(overwrittenTween, overwritingTween, target, killedProps);\n\t\t\t\t}\n\t\t\t\tfunc = TweenLite.onOverwrite;\n\t\t\t\tif (func) {\n\t\t\t\t\tr2 = func(overwrittenTween, overwritingTween, target, killedProps);\n\t\t\t\t}\n\t\t\t\treturn (r1 !== false && r2 !== false);\n\t\t\t},\n\t\t\t_applyOverwrite = function(target, tween, props, mode, siblings) {\n\t\t\t\tvar i, changed, curTween, l;\n\t\t\t\tif (mode === 1 || mode >= 4) {\n\t\t\t\t\tl = siblings.length;\n\t\t\t\t\tfor (i = 0; i < l; i++) {\n\t\t\t\t\t\tif ((curTween = siblings[i]) !== tween) {\n\t\t\t\t\t\t\tif (!curTween._gc) {\n\t\t\t\t\t\t\t\tif (curTween._kill(null, target, tween)) {\n\t\t\t\t\t\t\t\t\tchanged = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (mode === 5) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn changed;\n\t\t\t\t}\n\t\t\t\t//NOTE: Add 0.0000000001 to overcome floating point errors that can cause the startTime to be VERY slightly off (when a tween's time() is set for example)\n\t\t\t\tvar startTime = tween._startTime + _tinyNum,\n\t\t\t\t\toverlaps = [],\n\t\t\t\t\toCount = 0,\n\t\t\t\t\tzeroDur = (tween._duration === 0),\n\t\t\t\t\tglobalStart;\n\t\t\t\ti = siblings.length;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tif ((curTween = siblings[i]) === tween || curTween._gc || curTween._paused) {\n\t\t\t\t\t\t//ignore\n\t\t\t\t\t} else if (curTween._timeline !== tween._timeline) {\n\t\t\t\t\t\tglobalStart = globalStart || _checkOverlap(tween, 0, zeroDur);\n\t\t\t\t\t\tif (_checkOverlap(curTween, globalStart, zeroDur) === 0) {\n\t\t\t\t\t\t\toverlaps[oCount++] = curTween;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (curTween._startTime <= startTime) if (curTween._startTime + curTween.totalDuration() / curTween._timeScale > startTime) if (!((zeroDur || !curTween._initted) && startTime - curTween._startTime <= 0.0000000002)) {\n\t\t\t\t\t\toverlaps[oCount++] = curTween;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ti = oCount;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tcurTween = overlaps[i];\n\t\t\t\t\tif (mode === 2) if (curTween._kill(props, target, tween)) {\n\t\t\t\t\t\tchanged = true;\n\t\t\t\t\t}\n\t\t\t\t\tif (mode !== 2 || (!curTween._firstPT && curTween._initted)) {\n\t\t\t\t\t\tif (mode !== 2 && !_onOverwrite(curTween, tween)) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (curTween._enabled(false, false)) { //if all property tweens have been overwritten, kill the tween.\n\t\t\t\t\t\t\tchanged = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn changed;\n\t\t\t},\n\t\t\t_checkOverlap = function(tween, reference, zeroDur) {\n\t\t\t\tvar tl = tween._timeline,\n\t\t\t\t\tts = tl._timeScale,\n\t\t\t\t\tt = tween._startTime;\n\t\t\t\twhile (tl._timeline) {\n\t\t\t\t\tt += tl._startTime;\n\t\t\t\t\tts *= tl._timeScale;\n\t\t\t\t\tif (tl._paused) {\n\t\t\t\t\t\treturn -100;\n\t\t\t\t\t}\n\t\t\t\t\ttl = tl._timeline;\n\t\t\t\t}\n\t\t\t\tt /= ts;\n\t\t\t\treturn (t > reference) ? t - reference : ((zeroDur && t === reference) || (!tween._initted && t - reference < 2 * _tinyNum)) ? _tinyNum : ((t += tween.totalDuration() / tween._timeScale / ts) > reference + _tinyNum) ? 0 : t - reference - _tinyNum;\n\t\t\t};\n\n\n//---- TweenLite instance methods -----------------------------------------------------------------------------\n\n\t\tp._init = function() {\n\t\t\tvar v = this.vars,\n\t\t\t\top = this._overwrittenProps,\n\t\t\t\tdur = this._duration,\n\t\t\t\timmediate = !!v.immediateRender,\n\t\t\t\tease = v.ease,\n\t\t\t\ti, initPlugins, pt, p, startVars, l;\n\t\t\tif (v.startAt) {\n\t\t\t\tif (this._startAt) {\n\t\t\t\t\tthis._startAt.render(-1, true); //if we've run a startAt previously (when the tween instantiated), we should revert it so that the values re-instantiate correctly particularly for relative tweens. Without this, a TweenLite.fromTo(obj, 1, {x:\"+=100\"}, {x:\"-=100\"}), for example, would actually jump to +=200 because the startAt would run twice, doubling the relative change.\n\t\t\t\t\tthis._startAt.kill();\n\t\t\t\t}\n\t\t\t\tstartVars = {};\n\t\t\t\tfor (p in v.startAt) { //copy the properties/values into a new object to avoid collisions, like var to = {x:0}, from = {x:500}; timeline.fromTo(e, 1, from, to).fromTo(e, 1, to, from);\n\t\t\t\t\tstartVars[p] = v.startAt[p];\n\t\t\t\t}\n\t\t\t\tstartVars.data = \"isStart\";\n\t\t\t\tstartVars.overwrite = false;\n\t\t\t\tstartVars.immediateRender = true;\n\t\t\t\tstartVars.lazy = (immediate && v.lazy !== false);\n\t\t\t\tstartVars.startAt = startVars.delay = null; //no nesting of startAt objects allowed (otherwise it could cause an infinite loop).\n\t\t\t\tstartVars.onUpdate = v.onUpdate;\n\t\t\t\tstartVars.onUpdateParams = v.onUpdateParams;\n\t\t\t\tstartVars.onUpdateScope = v.onUpdateScope || v.callbackScope || this;\n\t\t\t\tthis._startAt = TweenLite.to(this.target, 0, startVars);\n\t\t\t\tif (immediate) {\n\t\t\t\t\tif (this._time > 0) {\n\t\t\t\t\t\tthis._startAt = null; //tweens that render immediately (like most from() and fromTo() tweens) shouldn't revert when their parent timeline's playhead goes backward past the startTime because the initial render could have happened anytime and it shouldn't be directly correlated to this tween's startTime. Imagine setting up a complex animation where the beginning states of various objects are rendered immediately but the tween doesn't happen for quite some time - if we revert to the starting values as soon as the playhead goes backward past the tween's startTime, it will throw things off visually. Reversion should only happen in TimelineLite/Max instances where immediateRender was false (which is the default in the convenience methods like from()).\n\t\t\t\t\t} else if (dur !== 0) {\n\t\t\t\t\t\treturn; //we skip initialization here so that overwriting doesn't occur until the tween actually begins. Otherwise, if you create several immediateRender:true tweens of the same target/properties to drop into a TimelineLite or TimelineMax, the last one created would overwrite the first ones because they didn't get placed into the timeline yet before the first render occurs and kicks in overwriting.\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (v.runBackwards && dur !== 0) {\n\t\t\t\t//from() tweens must be handled uniquely: their beginning values must be rendered but we don't want overwriting to occur yet (when time is still 0). Wait until the tween actually begins before doing all the routines like overwriting. At that time, we should render at the END of the tween to ensure that things initialize correctly (remember, from() tweens go backwards)\n\t\t\t\tif (this._startAt) {\n\t\t\t\t\tthis._startAt.render(-1, true);\n\t\t\t\t\tthis._startAt.kill();\n\t\t\t\t\tthis._startAt = null;\n\t\t\t\t} else {\n\t\t\t\t\tif (this._time !== 0) { //in rare cases (like if a from() tween runs and then is invalidate()-ed), immediateRender could be true but the initial forced-render gets skipped, so there's no need to force the render in this context when the _time is greater than 0\n\t\t\t\t\t\timmediate = false;\n\t\t\t\t\t}\n\t\t\t\t\tpt = {};\n\t\t\t\t\tfor (p in v) { //copy props into a new object and skip any reserved props, otherwise onComplete or onUpdate or onStart could fire. We should, however, permit autoCSS to go through.\n\t\t\t\t\t\tif (!_reservedProps[p] || p === \"autoCSS\") {\n\t\t\t\t\t\t\tpt[p] = v[p];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpt.overwrite = 0;\n\t\t\t\t\tpt.data = \"isFromStart\"; //we tag the tween with as \"isFromStart\" so that if [inside a plugin] we need to only do something at the very END of a tween, we have a way of identifying this tween as merely the one that's setting the beginning values for a \"from()\" tween. For example, clearProps in CSSPlugin should only get applied at the very END of a tween and without this tag, from(...{height:100, clearProps:\"height\", delay:1}) would wipe the height at the beginning of the tween and after 1 second, it'd kick back in.\n\t\t\t\t\tpt.lazy = (immediate && v.lazy !== false);\n\t\t\t\t\tpt.immediateRender = immediate; //zero-duration tweens render immediately by default, but if we're not specifically instructed to render this tween immediately, we should skip this and merely _init() to record the starting values (rendering them immediately would push them to completion which is wasteful in that case - we'd have to render(-1) immediately after)\n\t\t\t\t\tthis._startAt = TweenLite.to(this.target, 0, pt);\n\t\t\t\t\tif (!immediate) {\n\t\t\t\t\t\tthis._startAt._init(); //ensures that the initial values are recorded\n\t\t\t\t\t\tthis._startAt._enabled(false); //no need to have the tween render on the next cycle. Disable it because we'll always manually control the renders of the _startAt tween.\n\t\t\t\t\t\tif (this.vars.immediateRender) {\n\t\t\t\t\t\t\tthis._startAt = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (this._time === 0) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._ease = ease = (!ease) ? TweenLite.defaultEase : (ease instanceof Ease) ? ease : (typeof(ease) === \"function\") ? new Ease(ease, v.easeParams) : _easeMap[ease] || TweenLite.defaultEase;\n\t\t\tif (v.easeParams instanceof Array && ease.config) {\n\t\t\t\tthis._ease = ease.config.apply(ease, v.easeParams);\n\t\t\t}\n\t\t\tthis._easeType = this._ease._type;\n\t\t\tthis._easePower = this._ease._power;\n\t\t\tthis._firstPT = null;\n\n\t\t\tif (this._targets) {\n\t\t\t\tl = this._targets.length;\n\t\t\t\tfor (i = 0; i < l; i++) {\n\t\t\t\t\tif ( this._initProps( this._targets[i], (this._propLookup[i] = {}), this._siblings[i], (op ? op[i] : null), i) ) {\n\t\t\t\t\t\tinitPlugins = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tinitPlugins = this._initProps(this.target, this._propLookup, this._siblings, op, 0);\n\t\t\t}\n\n\t\t\tif (initPlugins) {\n\t\t\t\tTweenLite._onPluginEvent(\"_onInitAllProps\", this); //reorders the array in order of priority. Uses a static TweenPlugin method in order to minimize file size in TweenLite\n\t\t\t}\n\t\t\tif (op) if (!this._firstPT) if (typeof(this.target) !== \"function\") { //if all tweening properties have been overwritten, kill the tween. If the target is a function, it's probably a delayedCall so let it live.\n\t\t\t\tthis._enabled(false, false);\n\t\t\t}\n\t\t\tif (v.runBackwards) {\n\t\t\t\tpt = this._firstPT;\n\t\t\t\twhile (pt) {\n\t\t\t\t\tpt.s += pt.c;\n\t\t\t\t\tpt.c = -pt.c;\n\t\t\t\t\tpt = pt._next;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._onUpdate = v.onUpdate;\n\t\t\tthis._initted = true;\n\t\t};\n\n\t\tp._initProps = function(target, propLookup, siblings, overwrittenProps, index) {\n\t\t\tvar p, i, initPlugins, plugin, pt, v;\n\t\t\tif (target == null) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (_lazyLookup[target._gsTweenID]) {\n\t\t\t\t_lazyRender(); //if other tweens of the same target have recently initted but haven't rendered yet, we've got to force the render so that the starting values are correct (imagine populating a timeline with a bunch of sequential tweens and then jumping to the end)\n\t\t\t}\n\n\t\t\tif (!this.vars.css) if (target.style) if (target !== window && target.nodeType) if (_plugins.css) if (this.vars.autoCSS !== false) { //it's so common to use TweenLite/Max to animate the css of DOM elements, we assume that if the target is a DOM element, that's what is intended (a convenience so that users don't have to wrap things in css:{}, although we still recommend it for a slight performance boost and better specificity). Note: we cannot check \"nodeType\" on the window inside an iframe.\n\t\t\t\t_autoCSS(this.vars, target);\n\t\t\t}\n\t\t\tfor (p in this.vars) {\n\t\t\t\tv = this.vars[p];\n\t\t\t\tif (_reservedProps[p]) {\n\t\t\t\t\tif (v) if ((v instanceof Array) || (v.push && _isArray(v))) if (v.join(\"\").indexOf(\"{self}\") !== -1) {\n\t\t\t\t\t\tthis.vars[p] = v = this._swapSelfInParams(v, this);\n\t\t\t\t\t}\n\n\t\t\t\t} else if (_plugins[p] && (plugin = new _plugins[p]())._onInitTween(target, this.vars[p], this, index)) {\n\n\t\t\t\t\t//t - target \t\t[object]\n\t\t\t\t\t//p - property \t\t[string]\n\t\t\t\t\t//s - start\t\t\t[number]\n\t\t\t\t\t//c - change\t\t[number]\n\t\t\t\t\t//f - isFunction\t[boolean]\n\t\t\t\t\t//n - name\t\t\t[string]\n\t\t\t\t\t//pg - isPlugin \t[boolean]\n\t\t\t\t\t//pr - priority\t\t[number]\n\t\t\t\t\t//m - mod           [function | 0]\n\t\t\t\t\tthis._firstPT = pt = {_next:this._firstPT, t:plugin, p:\"setRatio\", s:0, c:1, f:1, n:p, pg:1, pr:plugin._priority, m:0};\n\t\t\t\t\ti = plugin._overwriteProps.length;\n\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\tpropLookup[plugin._overwriteProps[i]] = this._firstPT;\n\t\t\t\t\t}\n\t\t\t\t\tif (plugin._priority || plugin._onInitAllProps) {\n\t\t\t\t\t\tinitPlugins = true;\n\t\t\t\t\t}\n\t\t\t\t\tif (plugin._onDisable || plugin._onEnable) {\n\t\t\t\t\t\tthis._notifyPluginsOfEnabled = true;\n\t\t\t\t\t}\n\t\t\t\t\tif (pt._next) {\n\t\t\t\t\t\tpt._next._prev = pt;\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tpropLookup[p] = _addPropTween.call(this, target, p, \"get\", v, p, 0, null, this.vars.stringFilter, index);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (overwrittenProps) if (this._kill(overwrittenProps, target)) { //another tween may have tried to overwrite properties of this tween before init() was called (like if two tweens start at the same time, the one created second will run first)\n\t\t\t\treturn this._initProps(target, propLookup, siblings, overwrittenProps, index);\n\t\t\t}\n\t\t\tif (this._overwrite > 1) if (this._firstPT) if (siblings.length > 1) if (_applyOverwrite(target, this, propLookup, this._overwrite, siblings)) {\n\t\t\t\tthis._kill(propLookup, target);\n\t\t\t\treturn this._initProps(target, propLookup, siblings, overwrittenProps, index);\n\t\t\t}\n\t\t\tif (this._firstPT) if ((this.vars.lazy !== false && this._duration) || (this.vars.lazy && !this._duration)) { //zero duration tweens don't lazy render by default; everything else does.\n\t\t\t\t_lazyLookup[target._gsTweenID] = true;\n\t\t\t}\n\t\t\treturn initPlugins;\n\t\t};\n\n\t\tp.render = function(time, suppressEvents, force) {\n\t\t\tvar prevTime = this._time,\n\t\t\t\tduration = this._duration,\n\t\t\t\tprevRawPrevTime = this._rawPrevTime,\n\t\t\t\tisComplete, callback, pt, rawPrevTime;\n\t\t\tif (time >= duration - 0.0000001 && time >= 0) { //to work around occasional floating point math artifacts.\n\t\t\t\tthis._totalTime = this._time = duration;\n\t\t\t\tthis.ratio = this._ease._calcEnd ? this._ease.getRatio(1) : 1;\n\t\t\t\tif (!this._reversed ) {\n\t\t\t\t\tisComplete = true;\n\t\t\t\t\tcallback = \"onComplete\";\n\t\t\t\t\tforce = (force || this._timeline.autoRemoveChildren); //otherwise, if the animation is unpaused/activated after it's already finished, it doesn't get removed from the parent timeline.\n\t\t\t\t}\n\t\t\t\tif (duration === 0) if (this._initted || !this.vars.lazy || force) { //zero-duration tweens are tricky because we must discern the momentum/direction of time in order to determine whether the starting values should be rendered or the ending values. If the \"playhead\" of its timeline goes past the zero-duration tween in the forward direction or lands directly on it, the end values should be rendered, but if the timeline's \"playhead\" moves past it in the backward direction (from a postitive time to a negative time), the starting values must be rendered.\n\t\t\t\t\tif (this._startTime === this._timeline._duration) { //if a zero-duration tween is at the VERY end of a timeline and that timeline renders at its end, it will typically add a tiny bit of cushion to the render time to prevent rounding errors from getting in the way of tweens rendering their VERY end. If we then reverse() that timeline, the zero-duration tween will trigger its onReverseComplete even though technically the playhead didn't pass over it again. It's a very specific edge case we must accommodate.\n\t\t\t\t\t\ttime = 0;\n\t\t\t\t\t}\n\t\t\t\t\tif (prevRawPrevTime < 0 || (time <= 0 && time >= -0.0000001) || (prevRawPrevTime === _tinyNum && this.data !== \"isPause\")) if (prevRawPrevTime !== time) { //note: when this.data is \"isPause\", it's a callback added by addPause() on a timeline that we should not be triggered when LEAVING its exact start time. In other words, tl.addPause(1).play(1) shouldn't pause.\n\t\t\t\t\t\tforce = true;\n\t\t\t\t\t\tif (prevRawPrevTime > _tinyNum) {\n\t\t\t\t\t\t\tcallback = \"onReverseComplete\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis._rawPrevTime = rawPrevTime = (!suppressEvents || time || prevRawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.\n\t\t\t\t}\n\n\t\t\t} else if (time < 0.0000001) { //to work around occasional floating point math artifacts, round super small values to 0.\n\t\t\t\tthis._totalTime = this._time = 0;\n\t\t\t\tthis.ratio = this._ease._calcEnd ? this._ease.getRatio(0) : 0;\n\t\t\t\tif (prevTime !== 0 || (duration === 0 && prevRawPrevTime > 0)) {\n\t\t\t\t\tcallback = \"onReverseComplete\";\n\t\t\t\t\tisComplete = this._reversed;\n\t\t\t\t}\n\t\t\t\tif (time < 0) {\n\t\t\t\t\tthis._active = false;\n\t\t\t\t\tif (duration === 0) if (this._initted || !this.vars.lazy || force) { //zero-duration tweens are tricky because we must discern the momentum/direction of time in order to determine whether the starting values should be rendered or the ending values. If the \"playhead\" of its timeline goes past the zero-duration tween in the forward direction or lands directly on it, the end values should be rendered, but if the timeline's \"playhead\" moves past it in the backward direction (from a postitive time to a negative time), the starting values must be rendered.\n\t\t\t\t\t\tif (prevRawPrevTime >= 0 && !(prevRawPrevTime === _tinyNum && this.data === \"isPause\")) {\n\t\t\t\t\t\t\tforce = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._rawPrevTime = rawPrevTime = (!suppressEvents || time || prevRawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!this._initted || (this._startAt && this._startAt.progress())) { //if we render the very beginning (time == 0) of a fromTo(), we must force the render (normal tweens wouldn't need to render at a time of 0 when the prevTime was also 0). This is also mandatory to make sure overwriting kicks in immediately. Also, we check progress() because if startAt has already rendered at its end, we should force a render at its beginning. Otherwise, if you put the playhead directly on top of where a fromTo({immediateRender:false}) starts, and then move it backwards, the from() won't revert its values.\n\t\t\t\t\tforce = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._totalTime = this._time = time;\n\n\t\t\t\tif (this._easeType) {\n\t\t\t\t\tvar r = time / duration, type = this._easeType, pow = this._easePower;\n\t\t\t\t\tif (type === 1 || (type === 3 && r >= 0.5)) {\n\t\t\t\t\t\tr = 1 - r;\n\t\t\t\t\t}\n\t\t\t\t\tif (type === 3) {\n\t\t\t\t\t\tr *= 2;\n\t\t\t\t\t}\n\t\t\t\t\tif (pow === 1) {\n\t\t\t\t\t\tr *= r;\n\t\t\t\t\t} else if (pow === 2) {\n\t\t\t\t\t\tr *= r * r;\n\t\t\t\t\t} else if (pow === 3) {\n\t\t\t\t\t\tr *= r * r * r;\n\t\t\t\t\t} else if (pow === 4) {\n\t\t\t\t\t\tr *= r * r * r * r;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (type === 1) {\n\t\t\t\t\t\tthis.ratio = 1 - r;\n\t\t\t\t\t} else if (type === 2) {\n\t\t\t\t\t\tthis.ratio = r;\n\t\t\t\t\t} else if (time / duration < 0.5) {\n\t\t\t\t\t\tthis.ratio = r / 2;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.ratio = 1 - (r / 2);\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tthis.ratio = this._ease.getRatio(time / duration);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this._time === prevTime && !force) {\n\t\t\t\treturn;\n\t\t\t} else if (!this._initted) {\n\t\t\t\tthis._init();\n\t\t\t\tif (!this._initted || this._gc) { //immediateRender tweens typically won't initialize until the playhead advances (_time is greater than 0) in order to ensure that overwriting occurs properly. Also, if all of the tweening properties have been overwritten (which would cause _gc to be true, as set in _init()), we shouldn't continue otherwise an onStart callback could be called for example.\n\t\t\t\t\treturn;\n\t\t\t\t} else if (!force && this._firstPT && ((this.vars.lazy !== false && this._duration) || (this.vars.lazy && !this._duration))) {\n\t\t\t\t\tthis._time = this._totalTime = prevTime;\n\t\t\t\t\tthis._rawPrevTime = prevRawPrevTime;\n\t\t\t\t\t_lazyTweens.push(this);\n\t\t\t\t\tthis._lazy = [time, suppressEvents];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t//_ease is initially set to defaultEase, so now that init() has run, _ease is set properly and we need to recalculate the ratio. Overall this is faster than using conditional logic earlier in the method to avoid having to set ratio twice because we only init() once but renderTime() gets called VERY frequently.\n\t\t\t\tif (this._time && !isComplete) {\n\t\t\t\t\tthis.ratio = this._ease.getRatio(this._time / duration);\n\t\t\t\t} else if (isComplete && this._ease._calcEnd) {\n\t\t\t\t\tthis.ratio = this._ease.getRatio((this._time === 0) ? 0 : 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this._lazy !== false) { //in case a lazy render is pending, we should flush it because the new render is occurring now (imagine a lazy tween instantiating and then immediately the user calls tween.seek(tween.duration()), skipping to the end - the end render would be forced, and then if we didn't flush the lazy render, it'd fire AFTER the seek(), rendering it at the wrong time.\n\t\t\t\tthis._lazy = false;\n\t\t\t}\n\t\t\tif (!this._active) if (!this._paused && this._time !== prevTime && time >= 0) {\n\t\t\t\tthis._active = true;  //so that if the user renders a tween (as opposed to the timeline rendering it), the timeline is forced to re-render and align it with the proper time/frame on the next rendering cycle. Maybe the tween already finished but the user manually re-renders it as halfway done.\n\t\t\t}\n\t\t\tif (prevTime === 0) {\n\t\t\t\tif (this._startAt) {\n\t\t\t\t\tif (time >= 0) {\n\t\t\t\t\t\tthis._startAt.render(time, true, force);\n\t\t\t\t\t} else if (!callback) {\n\t\t\t\t\t\tcallback = \"_dummyGS\"; //if no callback is defined, use a dummy value just so that the condition at the end evaluates as true because _startAt should render AFTER the normal render loop when the time is negative. We could handle this in a more intuitive way, of course, but the render loop is the MOST important thing to optimize, so this technique allows us to avoid adding extra conditional logic in a high-frequency area.\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (this.vars.onStart) if (this._time !== 0 || duration === 0) if (!suppressEvents) {\n\t\t\t\t\tthis._callback(\"onStart\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tpt = this._firstPT;\n\t\t\twhile (pt) {\n\t\t\t\tif (pt.f) {\n\t\t\t\t\tpt.t[pt.p](pt.c * this.ratio + pt.s);\n\t\t\t\t} else {\n\t\t\t\t\tpt.t[pt.p] = pt.c * this.ratio + pt.s;\n\t\t\t\t}\n\t\t\t\tpt = pt._next;\n\t\t\t}\n\n\t\t\tif (this._onUpdate) {\n\t\t\t\tif (time < 0) if (this._startAt && time !== -0.0001) { //if the tween is positioned at the VERY beginning (_startTime 0) of its parent timeline, it's illegal for the playhead to go back further, so we should not render the recorded startAt values.\n\t\t\t\t\tthis._startAt.render(time, true, force); //note: for performance reasons, we tuck this conditional logic inside less traveled areas (most tweens don't have an onUpdate). We'd just have it at the end before the onComplete, but the values should be updated before any onUpdate is called, so we ALSO put it here and then if it's not called, we do so later near the onComplete.\n\t\t\t\t}\n\t\t\t\tif (!suppressEvents) if (this._time !== prevTime || isComplete || force) {\n\t\t\t\t\tthis._callback(\"onUpdate\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (callback) if (!this._gc || force) { //check _gc because there's a chance that kill() could be called in an onUpdate\n\t\t\t\tif (time < 0 && this._startAt && !this._onUpdate && time !== -0.0001) { //-0.0001 is a special value that we use when looping back to the beginning of a repeated TimelineMax, in which case we shouldn't render the _startAt values.\n\t\t\t\t\tthis._startAt.render(time, true, force);\n\t\t\t\t}\n\t\t\t\tif (isComplete) {\n\t\t\t\t\tif (this._timeline.autoRemoveChildren) {\n\t\t\t\t\t\tthis._enabled(false, false);\n\t\t\t\t\t}\n\t\t\t\t\tthis._active = false;\n\t\t\t\t}\n\t\t\t\tif (!suppressEvents && this.vars[callback]) {\n\t\t\t\t\tthis._callback(callback);\n\t\t\t\t}\n\t\t\t\tif (duration === 0 && this._rawPrevTime === _tinyNum && rawPrevTime !== _tinyNum) { //the onComplete or onReverseComplete could trigger movement of the playhead and for zero-duration tweens (which must discern direction) that land directly back on their start time, we don't want to fire again on the next render. Think of several addPause()'s in a timeline that forces the playhead to a certain spot, but what if it's already paused and another tween is tweening the \"time\" of the timeline? Each time it moves [forward] past that spot, it would move back, and since suppressEvents is true, it'd reset _rawPrevTime to _tinyNum so that when it begins again, the callback would fire (so ultimately it could bounce back and forth during that tween). Again, this is a very uncommon scenario, but possible nonetheless.\n\t\t\t\t\tthis._rawPrevTime = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tp._kill = function(vars, target, overwritingTween) {\n\t\t\tif (vars === \"all\") {\n\t\t\t\tvars = null;\n\t\t\t}\n\t\t\tif (vars == null) if (target == null || target === this.target) {\n\t\t\t\tthis._lazy = false;\n\t\t\t\treturn this._enabled(false, false);\n\t\t\t}\n\t\t\ttarget = (typeof(target) !== \"string\") ? (target || this._targets || this.target) : TweenLite.selector(target) || target;\n\t\t\tvar simultaneousOverwrite = (overwritingTween && this._time && overwritingTween._startTime === this._startTime && this._timeline === overwritingTween._timeline),\n\t\t\t\ti, overwrittenProps, p, pt, propLookup, changed, killProps, record, killed;\n\t\t\tif ((_isArray(target) || _isSelector(target)) && typeof(target[0]) !== \"number\") {\n\t\t\t\ti = target.length;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tif (this._kill(vars, target[i], overwritingTween)) {\n\t\t\t\t\t\tchanged = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (this._targets) {\n\t\t\t\t\ti = this._targets.length;\n\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\tif (target === this._targets[i]) {\n\t\t\t\t\t\t\tpropLookup = this._propLookup[i] || {};\n\t\t\t\t\t\t\tthis._overwrittenProps = this._overwrittenProps || [];\n\t\t\t\t\t\t\toverwrittenProps = this._overwrittenProps[i] = vars ? this._overwrittenProps[i] || {} : \"all\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (target !== this.target) {\n\t\t\t\t\treturn false;\n\t\t\t\t} else {\n\t\t\t\t\tpropLookup = this._propLookup;\n\t\t\t\t\toverwrittenProps = this._overwrittenProps = vars ? this._overwrittenProps || {} : \"all\";\n\t\t\t\t}\n\n\t\t\t\tif (propLookup) {\n\t\t\t\t\tkillProps = vars || propLookup;\n\t\t\t\t\trecord = (vars !== overwrittenProps && overwrittenProps !== \"all\" && vars !== propLookup && (typeof(vars) !== \"object\" || !vars._tempKill)); //_tempKill is a super-secret way to delete a particular tweening property but NOT have it remembered as an official overwritten property (like in BezierPlugin)\n\t\t\t\t\tif (overwritingTween && (TweenLite.onOverwrite || this.vars.onOverwrite)) {\n\t\t\t\t\t\tfor (p in killProps) {\n\t\t\t\t\t\t\tif (propLookup[p]) {\n\t\t\t\t\t\t\t\tif (!killed) {\n\t\t\t\t\t\t\t\t\tkilled = [];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tkilled.push(p);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ((killed || !vars) && !_onOverwrite(this, overwritingTween, target, killed)) { //if the onOverwrite returned false, that means the user wants to override the overwriting (cancel it).\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (p in killProps) {\n\t\t\t\t\t\tif ((pt = propLookup[p])) {\n\t\t\t\t\t\t\tif (simultaneousOverwrite) { //if another tween overwrites this one and they both start at exactly the same time, yet this tween has already rendered once (for example, at 0.001) because it's first in the queue, we should revert the values to where they were at 0 so that the starting values aren't contaminated on the overwriting tween.\n\t\t\t\t\t\t\t\tif (pt.f) {\n\t\t\t\t\t\t\t\t\tpt.t[pt.p](pt.s);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tpt.t[pt.p] = pt.s;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tchanged = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (pt.pg && pt.t._kill(killProps)) {\n\t\t\t\t\t\t\t\tchanged = true; //some plugins need to be notified so they can perform cleanup tasks first\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!pt.pg || pt.t._overwriteProps.length === 0) {\n\t\t\t\t\t\t\t\tif (pt._prev) {\n\t\t\t\t\t\t\t\t\tpt._prev._next = pt._next;\n\t\t\t\t\t\t\t\t} else if (pt === this._firstPT) {\n\t\t\t\t\t\t\t\t\tthis._firstPT = pt._next;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (pt._next) {\n\t\t\t\t\t\t\t\t\tpt._next._prev = pt._prev;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tpt._next = pt._prev = null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdelete propLookup[p];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (record) {\n\t\t\t\t\t\t\toverwrittenProps[p] = 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!this._firstPT && this._initted) { //if all tweening properties are killed, kill the tween. Without this line, if there's a tween with multiple targets and then you killTweensOf() each target individually, the tween would technically still remain active and fire its onComplete even though there aren't any more properties tweening.\n\t\t\t\t\t\tthis._enabled(false, false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn changed;\n\t\t};\n\n\t\tp.invalidate = function() {\n\t\t\tif (this._notifyPluginsOfEnabled) {\n\t\t\t\tTweenLite._onPluginEvent(\"_onDisable\", this);\n\t\t\t}\n\t\t\tthis._firstPT = this._overwrittenProps = this._startAt = this._onUpdate = null;\n\t\t\tthis._notifyPluginsOfEnabled = this._active = this._lazy = false;\n\t\t\tthis._propLookup = (this._targets) ? {} : [];\n\t\t\tAnimation.prototype.invalidate.call(this);\n\t\t\tif (this.vars.immediateRender) {\n\t\t\t\tthis._time = -_tinyNum; //forces a render without having to set the render() \"force\" parameter to true because we want to allow lazying by default (using the \"force\" parameter always forces an immediate full render)\n\t\t\t\tthis.render(Math.min(0, -this._delay)); //in case delay is negative.\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp._enabled = function(enabled, ignoreTimeline) {\n\t\t\tif (!_tickerActive) {\n\t\t\t\t_ticker.wake();\n\t\t\t}\n\t\t\tif (enabled && this._gc) {\n\t\t\t\tvar targets = this._targets,\n\t\t\t\t\ti;\n\t\t\t\tif (targets) {\n\t\t\t\t\ti = targets.length;\n\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\tthis._siblings[i] = _register(targets[i], this, true);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis._siblings = _register(this.target, this, true);\n\t\t\t\t}\n\t\t\t}\n\t\t\tAnimation.prototype._enabled.call(this, enabled, ignoreTimeline);\n\t\t\tif (this._notifyPluginsOfEnabled) if (this._firstPT) {\n\t\t\t\treturn TweenLite._onPluginEvent((enabled ? \"_onEnable\" : \"_onDisable\"), this);\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\n//----TweenLite static methods -----------------------------------------------------\n\n\t\tTweenLite.to = function(target, duration, vars) {\n\t\t\treturn new TweenLite(target, duration, vars);\n\t\t};\n\n\t\tTweenLite.from = function(target, duration, vars) {\n\t\t\tvars.runBackwards = true;\n\t\t\tvars.immediateRender = (vars.immediateRender != false);\n\t\t\treturn new TweenLite(target, duration, vars);\n\t\t};\n\n\t\tTweenLite.fromTo = function(target, duration, fromVars, toVars) {\n\t\t\ttoVars.startAt = fromVars;\n\t\t\ttoVars.immediateRender = (toVars.immediateRender != false && fromVars.immediateRender != false);\n\t\t\treturn new TweenLite(target, duration, toVars);\n\t\t};\n\n\t\tTweenLite.delayedCall = function(delay, callback, params, scope, useFrames) {\n\t\t\treturn new TweenLite(callback, 0, {delay:delay, onComplete:callback, onCompleteParams:params, callbackScope:scope, onReverseComplete:callback, onReverseCompleteParams:params, immediateRender:false, lazy:false, useFrames:useFrames, overwrite:0});\n\t\t};\n\n\t\tTweenLite.set = function(target, vars) {\n\t\t\treturn new TweenLite(target, 0, vars);\n\t\t};\n\n\t\tTweenLite.getTweensOf = function(target, onlyActive) {\n\t\t\tif (target == null) { return []; }\n\t\t\ttarget = (typeof(target) !== \"string\") ? target : TweenLite.selector(target) || target;\n\t\t\tvar i, a, j, t;\n\t\t\tif ((_isArray(target) || _isSelector(target)) && typeof(target[0]) !== \"number\") {\n\t\t\t\ti = target.length;\n\t\t\t\ta = [];\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\ta = a.concat(TweenLite.getTweensOf(target[i], onlyActive));\n\t\t\t\t}\n\t\t\t\ti = a.length;\n\t\t\t\t//now get rid of any duplicates (tweens of arrays of objects could cause duplicates)\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tt = a[i];\n\t\t\t\t\tj = i;\n\t\t\t\t\twhile (--j > -1) {\n\t\t\t\t\t\tif (t === a[j]) {\n\t\t\t\t\t\t\ta.splice(i, 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (target._gsTweenID) {\n\t\t\t\ta = _register(target).concat();\n\t\t\t\ti = a.length;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tif (a[i]._gc || (onlyActive && !a[i].isActive())) {\n\t\t\t\t\t\ta.splice(i, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn a || [];\n\t\t};\n\n\t\tTweenLite.killTweensOf = TweenLite.killDelayedCallsTo = function(target, onlyActive, vars) {\n\t\t\tif (typeof(onlyActive) === \"object\") {\n\t\t\t\tvars = onlyActive; //for backwards compatibility (before \"onlyActive\" parameter was inserted)\n\t\t\t\tonlyActive = false;\n\t\t\t}\n\t\t\tvar a = TweenLite.getTweensOf(target, onlyActive),\n\t\t\t\ti = a.length;\n\t\t\twhile (--i > -1) {\n\t\t\t\ta[i]._kill(vars, target);\n\t\t\t}\n\t\t};\n\n\n\n/*\n * ----------------------------------------------------------------\n * TweenPlugin   (could easily be split out as a separate file/class, but included for ease of use (so that people don't need to include another script call before loading plugins which is easy to forget)\n * ----------------------------------------------------------------\n */\n\t\tvar TweenPlugin = _class(\"plugins.TweenPlugin\", function(props, priority) {\n\t\t\t\t\tthis._overwriteProps = (props || \"\").split(\",\");\n\t\t\t\t\tthis._propName = this._overwriteProps[0];\n\t\t\t\t\tthis._priority = priority || 0;\n\t\t\t\t\tthis._super = TweenPlugin.prototype;\n\t\t\t\t}, true);\n\n\t\tp = TweenPlugin.prototype;\n\t\tTweenPlugin.version = \"1.19.0\";\n\t\tTweenPlugin.API = 2;\n\t\tp._firstPT = null;\n\t\tp._addTween = _addPropTween;\n\t\tp.setRatio = _setRatio;\n\n\t\tp._kill = function(lookup) {\n\t\t\tvar a = this._overwriteProps,\n\t\t\t\tpt = this._firstPT,\n\t\t\t\ti;\n\t\t\tif (lookup[this._propName] != null) {\n\t\t\t\tthis._overwriteProps = [];\n\t\t\t} else {\n\t\t\t\ti = a.length;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tif (lookup[a[i]] != null) {\n\t\t\t\t\t\ta.splice(i, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\twhile (pt) {\n\t\t\t\tif (lookup[pt.n] != null) {\n\t\t\t\t\tif (pt._next) {\n\t\t\t\t\t\tpt._next._prev = pt._prev;\n\t\t\t\t\t}\n\t\t\t\t\tif (pt._prev) {\n\t\t\t\t\t\tpt._prev._next = pt._next;\n\t\t\t\t\t\tpt._prev = null;\n\t\t\t\t\t} else if (this._firstPT === pt) {\n\t\t\t\t\t\tthis._firstPT = pt._next;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpt = pt._next;\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\t\tp._mod = p._roundProps = function(lookup) {\n\t\t\tvar pt = this._firstPT,\n\t\t\t\tval;\n\t\t\twhile (pt) {\n\t\t\t\tval = lookup[this._propName] || (pt.n != null && lookup[ pt.n.split(this._propName + \"_\").join(\"\") ]);\n\t\t\t\tif (val && typeof(val) === \"function\") { //some properties that are very plugin-specific add a prefix named after the _propName plus an underscore, so we need to ignore that extra stuff here.\n\t\t\t\t\tif (pt.f === 2) {\n\t\t\t\t\t\tpt.t._applyPT.m = val;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpt.m = val;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpt = pt._next;\n\t\t\t}\n\t\t};\n\n\t\tTweenLite._onPluginEvent = function(type, tween) {\n\t\t\tvar pt = tween._firstPT,\n\t\t\t\tchanged, pt2, first, last, next;\n\t\t\tif (type === \"_onInitAllProps\") {\n\t\t\t\t//sorts the PropTween linked list in order of priority because some plugins need to render earlier/later than others, like MotionBlurPlugin applies its effects after all x/y/alpha tweens have rendered on each frame.\n\t\t\t\twhile (pt) {\n\t\t\t\t\tnext = pt._next;\n\t\t\t\t\tpt2 = first;\n\t\t\t\t\twhile (pt2 && pt2.pr > pt.pr) {\n\t\t\t\t\t\tpt2 = pt2._next;\n\t\t\t\t\t}\n\t\t\t\t\tif ((pt._prev = pt2 ? pt2._prev : last)) {\n\t\t\t\t\t\tpt._prev._next = pt;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfirst = pt;\n\t\t\t\t\t}\n\t\t\t\t\tif ((pt._next = pt2)) {\n\t\t\t\t\t\tpt2._prev = pt;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlast = pt;\n\t\t\t\t\t}\n\t\t\t\t\tpt = next;\n\t\t\t\t}\n\t\t\t\tpt = tween._firstPT = first;\n\t\t\t}\n\t\t\twhile (pt) {\n\t\t\t\tif (pt.pg) if (typeof(pt.t[type]) === \"function\") if (pt.t[type]()) {\n\t\t\t\t\tchanged = true;\n\t\t\t\t}\n\t\t\t\tpt = pt._next;\n\t\t\t}\n\t\t\treturn changed;\n\t\t};\n\n\t\tTweenPlugin.activate = function(plugins) {\n\t\t\tvar i = plugins.length;\n\t\t\twhile (--i > -1) {\n\t\t\t\tif (plugins[i].API === TweenPlugin.API) {\n\t\t\t\t\t_plugins[(new plugins[i]())._propName] = plugins[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t};\n\n\t\t//provides a more concise way to define plugins that have no dependencies besides TweenPlugin and TweenLite, wrapping common boilerplate stuff into one function (added in 1.9.0). You don't NEED to use this to define a plugin - the old way still works and can be useful in certain (rare) situations.\n\t\t_gsDefine.plugin = function(config) {\n\t\t\tif (!config || !config.propName || !config.init || !config.API) { throw \"illegal plugin definition.\"; }\n\t\t\tvar propName = config.propName,\n\t\t\t\tpriority = config.priority || 0,\n\t\t\t\toverwriteProps = config.overwriteProps,\n\t\t\t\tmap = {init:\"_onInitTween\", set:\"setRatio\", kill:\"_kill\", round:\"_mod\", mod:\"_mod\", initAll:\"_onInitAllProps\"},\n\t\t\t\tPlugin = _class(\"plugins.\" + propName.charAt(0).toUpperCase() + propName.substr(1) + \"Plugin\",\n\t\t\t\t\tfunction() {\n\t\t\t\t\t\tTweenPlugin.call(this, propName, priority);\n\t\t\t\t\t\tthis._overwriteProps = overwriteProps || [];\n\t\t\t\t\t}, (config.global === true)),\n\t\t\t\tp = Plugin.prototype = new TweenPlugin(propName),\n\t\t\t\tprop;\n\t\t\tp.constructor = Plugin;\n\t\t\tPlugin.API = config.API;\n\t\t\tfor (prop in map) {\n\t\t\t\tif (typeof(config[prop]) === \"function\") {\n\t\t\t\t\tp[map[prop]] = config[prop];\n\t\t\t\t}\n\t\t\t}\n\t\t\tPlugin.version = config.version;\n\t\t\tTweenPlugin.activate([Plugin]);\n\t\t\treturn Plugin;\n\t\t};\n\n\n\t\t//now run through all the dependencies discovered and if any are missing, log that to the console as a warning. This is why it's best to have TweenLite load last - it can check all the dependencies for you.\n\t\ta = window._gsQueue;\n\t\tif (a) {\n\t\t\tfor (i = 0; i < a.length; i++) {\n\t\t\t\ta[i]();\n\t\t\t}\n\t\t\tfor (p in _defLookup) {\n\t\t\t\tif (!_defLookup[p].func) {\n\t\t\t\t\twindow.console.log(\"GSAP encountered missing dependency: \" + p);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t_tickerActive = false; //ensures that the first official animation forces a ticker.tick() to update the time when it is instantiated\n\n})((typeof(module) !== \"undefined\" && module.exports && typeof(global) !== \"undefined\") ? global : this || window, \"TweenLite\");","/*!\n * VERSION: 0.2.2\n * DATE: 2018-02-15\n * UPDATES AND DOCS AT: http://greensock.com\n *\n * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.\n * This work is subject to the terms at http://greensock.com/standard-license or for\n * Club GreenSock members, the software agreement that was issued with your membership.\n *\n * @author: Jack Doyle, jack@greensock.com\n **/\nvar _gsScope = (typeof(module) !== \"undefined\" && module.exports && typeof(global) !== \"undefined\") ? global : this || window; //helps ensure compatibility with AMD/RequireJS and CommonJS/Node\n(_gsScope._gsQueue || (_gsScope._gsQueue = [])).push( function() {\n\n\t\"use strict\";\n\n\t_gsScope._gsDefine(\"easing.CustomEase\", [\"easing.Ease\"], function(Ease) {\n\n\t\tvar _numbersExp = /(?:(-|-=|\\+=)?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[0-9]/ig,\n\t\t\t_svgPathExp = /[achlmqstvz]|(-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[0-9]/ig,\n\t\t\t_scientific = /[\\+\\-]?\\d*\\.?\\d+e[\\+\\-]?\\d+/ig,\n\t\t\t_needsParsingExp = /[cLlsS]/g,\n\t\t\t_bezierError = \"CustomEase only accepts Cubic Bezier data.\",\n\t\t\t_bezierToPoints = function (x1, y1, x2, y2, x3, y3, x4, y4, threshold, points, index) {\n\t\t\t\tvar x12 = (x1 + x2) / 2,\n\t\t\t\t\ty12 = (y1 + y2) / 2,\n\t\t\t\t\tx23 = (x2 + x3) / 2,\n\t\t\t\t\ty23 = (y2 + y3) / 2,\n\t\t\t\t\tx34 = (x3 + x4) / 2,\n\t\t\t\t\ty34 = (y3 + y4) / 2,\n\t\t\t\t\tx123 = (x12 + x23) / 2,\n\t\t\t\t\ty123 = (y12 + y23) / 2,\n\t\t\t\t\tx234 = (x23 + x34) / 2,\n\t\t\t\t\ty234 = (y23 + y34) / 2,\n\t\t\t\t\tx1234 = (x123 + x234) / 2,\n\t\t\t\t\ty1234 = (y123 + y234) / 2,\n\t\t\t\t\tdx = x4 - x1,\n\t\t\t\t\tdy = y4 - y1,\n\t\t\t\t\td2 = Math.abs((x2 - x4) * dy - (y2 - y4) * dx),\n\t\t\t\t\td3 = Math.abs((x3 - x4) * dy - (y3 - y4) * dx),\n\t\t\t\t\tlength;\n\t\t\t\tif (!points) {\n\t\t\t\t\tpoints = [{x: x1, y: y1}, {x: x4, y: y4}];\n\t\t\t\t\tindex = 1;\n\t\t\t\t}\n\t\t\t\tpoints.splice(index || points.length - 1, 0, {x: x1234, y: y1234});\n\t\t\t\tif ((d2 + d3) * (d2 + d3) > threshold * (dx * dx + dy * dy)) {\n\t\t\t\t\tlength = points.length;\n\t\t\t\t\t_bezierToPoints(x1, y1, x12, y12, x123, y123, x1234, y1234, threshold, points, index);\n\t\t\t\t\t_bezierToPoints(x1234, y1234, x234, y234, x34, y34, x4, y4, threshold, points, index + 1 + (points.length - length));\n\t\t\t\t}\n\t\t\t\treturn points;\n\t\t\t},\n\n\t\t\t_pathDataToBezier = function (d) {\n\t\t\t\tvar a = (d + \"\").replace(_scientific, function (m) {\n\t\t\t\t\t\t\tvar n = +m;\n\t\t\t\t\t\t\treturn (n < 0.0001 && n > -0.0001) ? 0 : n;\n\t\t\t\t\t\t}).match(_svgPathExp) || [], //some authoring programs spit out very small numbers in scientific notation like \"1e-5\", so make sure we round that down to 0 first.\n\t\t\t\t\tpath = [],\n\t\t\t\t\trelativeX = 0,\n\t\t\t\t\trelativeY = 0,\n\t\t\t\t\telements = a.length,\n\t\t\t\t\tl = 2,\n\t\t\t\t\ti, x, y, command, isRelative, segment, startX, startY, prevCommand, difX, difY;\n\t\t\t\tfor (i = 0; i < elements; i++) {\n\t\t\t\t\tprevCommand = command;\n\t\t\t\t\tif (isNaN(a[i])) {\n\t\t\t\t\t\tcommand = a[i].toUpperCase();\n\t\t\t\t\t\tisRelative = (command !== a[i]); //lower case means relative\n\t\t\t\t\t} else { //commands like \"C\" can be strung together without any new command characters between.\n\t\t\t\t\t\ti--;\n\t\t\t\t\t}\n\t\t\t\t\tx = +a[i + 1];\n\t\t\t\t\ty = +a[i + 2];\n\t\t\t\t\tif (isRelative) {\n\t\t\t\t\t\tx += relativeX;\n\t\t\t\t\t\ty += relativeY;\n\t\t\t\t\t}\n\t\t\t\t\tif (!i) {\n\t\t\t\t\t\tstartX = x;\n\t\t\t\t\t\tstartY = y;\n\t\t\t\t\t}\n\t\t\t\t\tif (command === \"M\") {\n\t\t\t\t\t\tif (segment && segment.length < 8) { //if the path data was funky and just had a M with no actual drawing anywhere, skip it.\n\t\t\t\t\t\t\tpath.length -= 1;\n\t\t\t\t\t\t\tl = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\trelativeX = startX = x;\n\t\t\t\t\t\trelativeY = startY = y;\n\t\t\t\t\t\tsegment = [x, y];\n\t\t\t\t\t\tl = 2;\n\t\t\t\t\t\tpath.push(segment);\n\t\t\t\t\t\ti += 2;\n\t\t\t\t\t\tcommand = \"L\"; //an \"M\" with more than 2 values gets interpreted as \"lineTo\" commands (\"L\").\n\n\t\t\t\t\t} else if (command === \"C\") {\n\t\t\t\t\t\tif (!segment) {\n\t\t\t\t\t\t\tsegment = [0, 0];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsegment[l++] = x;\n\t\t\t\t\t\tsegment[l++] = y;\n\t\t\t\t\t\tif (!isRelative) {\n\t\t\t\t\t\t\trelativeX = relativeY = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsegment[l++] = relativeX + a[i + 3] * 1; //note: \"*1\" is just a fast/short way to cast the value as a Number. WAAAY faster in Chrome, slightly slower in Firefox.\n\t\t\t\t\t\tsegment[l++] = relativeY + a[i + 4] * 1;\n\t\t\t\t\t\tsegment[l++] = relativeX = relativeX + a[i + 5] * 1;\n\t\t\t\t\t\tsegment[l++] = relativeY = relativeY + a[i + 6] * 1;\n\t\t\t\t\t\ti += 6;\n\n\t\t\t\t\t} else if (command === \"S\") {\n\t\t\t\t\t\tif (prevCommand === \"C\" || prevCommand === \"S\") {\n\t\t\t\t\t\t\tdifX = relativeX - segment[l - 4];\n\t\t\t\t\t\t\tdifY = relativeY - segment[l - 3];\n\t\t\t\t\t\t\tsegment[l++] = relativeX + difX;\n\t\t\t\t\t\t\tsegment[l++] = relativeY + difY;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsegment[l++] = relativeX;\n\t\t\t\t\t\t\tsegment[l++] = relativeY;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsegment[l++] = x;\n\t\t\t\t\t\tsegment[l++] = y;\n\t\t\t\t\t\tif (!isRelative) {\n\t\t\t\t\t\t\trelativeX = relativeY = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsegment[l++] = relativeX = relativeX + a[i + 3] * 1;\n\t\t\t\t\t\tsegment[l++] = relativeY = relativeY + a[i + 4] * 1;\n\t\t\t\t\t\ti += 4;\n\n\t\t\t\t\t} else if (command === \"L\" || command === \"Z\") {\n\t\t\t\t\t\tif (command === \"Z\") {\n\t\t\t\t\t\t\tx = startX;\n\t\t\t\t\t\t\ty = startY;\n\t\t\t\t\t\t\tsegment.closed = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (command === \"L\" || Math.abs(relativeX - x) > 0.5 || Math.abs(relativeY - y) > 0.5) {\n\t\t\t\t\t\t\tsegment[l++] = relativeX + (x - relativeX) / 3;\n\t\t\t\t\t\t\tsegment[l++] = relativeY + (y - relativeY) / 3;\n\t\t\t\t\t\t\tsegment[l++] = relativeX + (x - relativeX) * 2 / 3;\n\t\t\t\t\t\t\tsegment[l++] = relativeY + (y - relativeY) * 2 / 3;\n\t\t\t\t\t\t\tsegment[l++] = x;\n\t\t\t\t\t\t\tsegment[l++] = y;\n\t\t\t\t\t\t\tif (command === \"L\") {\n\t\t\t\t\t\t\t\ti += 2;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\trelativeX = x;\n\t\t\t\t\t\trelativeY = y;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow _bezierError;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\treturn path[0];\n\t\t\t},\n\n\t\t\t_findMinimum = function (values) {\n\t\t\t\tvar l = values.length,\n\t\t\t\t\tmin = 999999999999,\n\t\t\t\t\ti;\n\t\t\t\tfor (i = 1; i < l; i += 6) {\n\t\t\t\t\tif (+values[i] < min) {\n\t\t\t\t\t\tmin = +values[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn min;\n\t\t\t},\n\n\t\t\t_normalize = function (values, height, originY) { //takes all the points and translates/scales them so that the x starts at 0 and ends at 1.\n\t\t\t\tif (!originY && originY !== 0) {\n\t\t\t\t\toriginY = Math.max(+values[values.length-1], +values[1]);\n\t\t\t\t}\n\t\t\t\tvar tx = +values[0] * -1,\n\t\t\t\t\tty = -originY,\n\t\t\t\t\tl = values.length,\n\t\t\t\t\tsx = 1 / (+values[l - 2] + tx),\n\t\t\t\t\tsy = -height || ((Math.abs(+values[l - 1] - +values[1]) < 0.01 * (+values[l - 2] - +values[0])) ? _findMinimum(values) + ty : +values[l - 1] + ty),\n\t\t\t\t\ti;\n\t\t\t\tif (sy) { //typically y ends at 1 (so that the end values are reached)\n\t\t\t\t\tsy = 1 / sy;\n\t\t\t\t} else { //in case the ease returns to its beginning value, scale everything proportionally\n\t\t\t\t\tsy = -sx;\n\t\t\t\t}\n\t\t\t\tfor (i = 0; i < l; i += 2) {\n\t\t\t\t\tvalues[i] = (+values[i] + tx) * sx;\n\t\t\t\t\tvalues[i + 1] = (+values[i + 1] + ty) * sy;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t_getRatio = function (p) {\n\t\t\t\tvar point = this.lookup[(p * this.l) | 0] || this.lookup[this.l - 1];\n\t\t\t\tif (point.nx < p) {\n\t\t\t\t\tpoint = point.n;\n\t\t\t\t}\n\t\t\t\treturn point.y + ((p - point.x) / point.cx) * point.cy;\n\t\t\t},\n\n\n\t\t\tCustomEase = function (id, data, config) {\n\t\t\t\tthis._calcEnd = true;\n\t\t\t\tthis.id = id;\n\t\t\t\tif (id) {\n\t\t\t\t\tEase.map[id] = this;\n\t\t\t\t}\n\t\t\t\tthis.getRatio = _getRatio; //speed optimization, faster lookups.\n\t\t\t\tthis.setData(data, config);\n\t\t\t},\n\t\t\tp = CustomEase.prototype = new Ease();\n\n\t\tp.constructor = CustomEase;\n\n\t\tp.setData = function(data, config) {\n\t\t\tdata = data || \"0,0,1,1\";\n\t\t\tvar values = data.match(_numbersExp),\n\t\t\t\tclosest = 1,\n\t\t\t\tpoints = [],\n\t\t\t\tl, a1, a2, i, inc, j, point, prevPoint, p, precision;\n\t\t\tconfig = config || {};\n\t\t\tprecision = config.precision || 1;\n\t\t\tthis.data = data;\n\t\t\tthis.lookup = [];\n\t\t\tthis.points = points;\n\t\t\tthis.fast = (precision <= 1);\n\t\t\tif (_needsParsingExp.test(data) || (data.indexOf(\"M\") !== -1 && data.indexOf(\"C\") === -1)) {\n\t\t\t\tvalues = _pathDataToBezier(data);\n\t\t\t}\n\t\t\tl = values.length;\n\t\t\tif (l === 4) {\n\t\t\t\tvalues.unshift(0, 0);\n\t\t\t\tvalues.push(1, 1);\n\t\t\t\tl = 8;\n\t\t\t} else if ((l - 2) % 6) {\n\t\t\t\tthrow _bezierError;\n\t\t\t}\n\t\t\tif (+values[0] !== 0 || +values[l - 2] !== 1) {\n\t\t\t\t_normalize(values, config.height, config.originY);\n\t\t\t}\n\n\t\t\tthis.rawBezier = values;\n\n\t\t\tfor (i = 2; i < l; i += 6) {\n\t\t\t\ta1 = {x: +values[i - 2], y: +values[i - 1]};\n\t\t\t\ta2 = {x: +values[i + 4], y: +values[i + 5]};\n\t\t\t\tpoints.push(a1, a2);\n\t\t\t\t_bezierToPoints(a1.x, a1.y, +values[i], +values[i + 1], +values[i + 2], +values[i + 3], a2.x, a2.y, 1 / (precision * 200000), points, points.length - 1);\n\t\t\t}\n\t\t\tl = points.length;\n\t\t\tfor (i = 0; i < l; i++) {\n\t\t\t\tpoint = points[i];\n\t\t\t\tprevPoint = points[i - 1] || point;\n\t\t\t\tif (point.x > prevPoint.x || (prevPoint.y !== point.y && prevPoint.x === point.x) || point === prevPoint) { //if a point goes BACKWARD in time or is a duplicate, just drop it.\n\t\t\t\t\tprevPoint.cx = point.x - prevPoint.x; //change in x between this point and the next point (performance optimization)\n\t\t\t\t\tprevPoint.cy = point.y - prevPoint.y;\n\t\t\t\t\tprevPoint.n = point;\n\t\t\t\t\tprevPoint.nx = point.x; //next point's x value (performance optimization, making lookups faster in getRatio()). Remember, the lookup will always land on a spot where it's either this point or the very next one (never beyond that)\n\t\t\t\t\tif (this.fast && i > 1 && Math.abs(prevPoint.cy / prevPoint.cx - points[i - 2].cy / points[i - 2].cx) > 2) { //if there's a sudden change in direction, prioritize accuracy over speed. Like a bounce ease - you don't want to risk the sampling chunks landing on each side of the bounce anchor and having it clipped off.\n\t\t\t\t\t\tthis.fast = false;\n\t\t\t\t\t}\n\t\t\t\t\tif (prevPoint.cx < closest) {\n\t\t\t\t\t\tif (!prevPoint.cx) {\n\t\t\t\t\t\t\tprevPoint.cx = 0.001; //avoids math problems in getRatio() (dividing by zero)\n\t\t\t\t\t\t\tif (i === l - 1) { //in case the final segment goes vertical RIGHT at the end, make sure we end at the end.\n\t\t\t\t\t\t\t\tprevPoint.x -= 0.001;\n\t\t\t\t\t\t\t\tclosest = Math.min(closest, 0.001);\n\t\t\t\t\t\t\t\tthis.fast = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclosest = prevPoint.cx;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tpoints.splice(i--, 1);\n\t\t\t\t\tl--;\n\t\t\t\t}\n\t\t\t}\n\t\t\tl = (1 / closest + 1) | 0;\n\t\t\tthis.l = l; //record for speed optimization\n\t\t\tinc = 1 / l;\n\t\t\tj = 0;\n\t\t\tpoint = points[0];\n\t\t\tif (this.fast) {\n\t\t\t\tfor (i = 0; i < l; i++) { //for fastest lookups, we just sample along the path at equal x (time) distance. Uses more memory and is slightly less accurate for anchors that don't land on the sampling points, but for the vast majority of eases it's excellent (and fast).\n\t\t\t\t\tp = i * inc;\n\t\t\t\t\tif (point.nx < p) {\n\t\t\t\t\t\tpoint = points[++j];\n\t\t\t\t\t}\n\t\t\t\t\ta1 = point.y + ((p - point.x) / point.cx) * point.cy;\n\t\t\t\t\tthis.lookup[i] = {x: p, cx: inc, y: a1, cy: 0, nx: 9};\n\t\t\t\t\tif (i) {\n\t\t\t\t\t\tthis.lookup[i - 1].cy = a1 - this.lookup[i - 1].y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.lookup[l - 1].cy = points[points.length - 1].y - a1;\n\t\t\t} else { //this option is more accurate, ensuring that EVERY anchor is hit perfectly. Clipping across a bounce, for example, would never happen.\n\t\t\t\tfor (i = 0; i < l; i++) { //build a lookup table based on the smallest distance so that we can instantly find the appropriate point (well, it'll either be that point or the very next one). We'll look up based on the linear progress. So it's it's 0.5 and the lookup table has 100 elements, it'd be like lookup[Math.floor(0.5 * 100)]\n\t\t\t\t\tif (point.nx < i * inc) {\n\t\t\t\t\t\tpoint = points[++j];\n\t\t\t\t\t}\n\t\t\t\t\tthis.lookup[i] = point;\n\t\t\t\t}\n\n\t\t\t\tif (j < points.length - 1) {\n\t\t\t\t\tthis.lookup[i-1] = points[points.length-2];\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._calcEnd = (points[points.length-1].y !== 1 || points[0].y !== 0); //ensures that we don't run into floating point errors. As long as we're starting at 0 and ending at 1, tell GSAP to skip the final calculation and use 0/1 as the factor.\n\t\t\treturn this;\n\t\t};\n\n\t\tp.getRatio = _getRatio;\n\n\t\tp.getSVGData = function(config) {\n\t\t\treturn CustomEase.getSVGData(this, config);\n\t\t};\n\n\t\tCustomEase.create = function (id, data, config) {\n\t\t\treturn new CustomEase(id, data, config);\n\t\t};\n\n\t\tCustomEase.version = \"0.2.2\";\n\n\t\tCustomEase.bezierToPoints = _bezierToPoints;\n\t\tCustomEase.get = function (id) {\n\t\t\treturn Ease.map[id];\n\t\t};\n\t\tCustomEase.getSVGData = function(ease, config) {\n\t\t\tconfig = config || {};\n\t\t\tvar rnd = 1000,\n\t\t\t\twidth = config.width || 100,\n\t\t\t\theight = config.height || 100,\n\t\t\t\tx = config.x || 0,\n\t\t\t\ty = (config.y || 0) + height,\n\t\t\t\te = config.path,\n\t\t\t\ta, slope, i, inc, tx, ty, precision, threshold, prevX, prevY;\n\t\t\tif (config.invert) {\n\t\t\t\theight = -height;\n\t\t\t\ty = 0;\n\t\t\t}\n\t\t\tease = ease.getRatio ? ease : Ease.map[ease] || console.log(\"No ease found: \", ease);\n\t\t\tif (!ease.rawBezier) {\n\t\t\t\ta = [\"M\" + x + \",\" + y];\n\t\t\t\tprecision = Math.max(5, (config.precision || 1) * 200);\n\t\t\t\tinc = 1 / precision;\n\t\t\t\tprecision += 2;\n\t\t\t\tthreshold = 5 / precision;\n\t\t\t\tprevX = (((x + inc * width) * rnd) | 0) / rnd;\n\t\t\t\tprevY = (((y + ease.getRatio(inc) * -height) * rnd) | 0) / rnd;\n\t\t\t\tslope = (prevY - y) / (prevX - x);\n\t\t\t\tfor (i = 2; i < precision; i++) {\n\t\t\t\t\ttx = (((x + i * inc * width) * rnd) | 0) / rnd;\n\t\t\t\t\tty = (((y + ease.getRatio(i * inc) * -height) * rnd) | 0) / rnd;\n\t\t\t\t\tif (Math.abs((ty - prevY) / (tx - prevX) - slope) > threshold || i === precision - 1) { //only add points when the slope changes beyond the threshold\n\t\t\t\t\t\ta.push(prevX + \",\" + prevY);\n\t\t\t\t\t\tslope = (ty - prevY) / (tx - prevX);\n\t\t\t\t\t}\n\t\t\t\t\tprevX = tx;\n\t\t\t\t\tprevY = ty;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ta = [];\n\t\t\t\tprecision = ease.rawBezier.length;\n\t\t\t\tfor (i = 0; i < precision; i += 2) {\n\t\t\t\t\ta.push((((x + ease.rawBezier[i] * width) * rnd) | 0) / rnd + \",\" + (((y + ease.rawBezier[i + 1] * -height) * rnd) | 0) / rnd);\n\t\t\t\t}\n\t\t\t\ta[0] = \"M\" + a[0];\n\t\t\t\ta[1] = \"C\" + a[1];\n\t\t\t}\n\t\t\tif (e) {\n\t\t\t\t(typeof(e) === \"string\" ? document.querySelector(e) : e).setAttribute(\"d\", a.join(\" \"));\n\t\t\t}\n\t\t\treturn a.join(\" \");\n\t\t};\n\n\t\treturn CustomEase;\n\n\t}, true);\n\n}); if (_gsScope._gsDefine) { _gsScope._gsQueue.pop()(); }\n\n//export to AMD/RequireJS and CommonJS/Node (precursor to full modular build system coming at a later date)\n(function(name) {\n\t\"use strict\";\n\tvar getGlobal = function() {\n\t\treturn (_gsScope.GreenSockGlobals || _gsScope)[name];\n\t};\n\tif (typeof(module) !== \"undefined\" && module.exports) { //node\n\t\trequire(\"gsap/TweenLite\");\n\t\tmodule.exports = getGlobal();\n\t} else if (typeof(define) === \"function\" && define.amd) { //AMD\n\t\tdefine([\"gsap/TweenLite\"], getGlobal);\n\t}\n}(\"CustomEase\"));","/*!\n * VERSION: 0.2.1\n * DATE: 2018-02-15\n * UPDATES AND DOCS AT: http://greensock.com\n *\n * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.\n * This work is subject to the terms at http://greensock.com/standard-license or for\n * Club GreenSock members, the software agreement that was issued with your membership.\n *\n * @author: Jack Doyle, jack@greensock.com\n **/\nvar _gsScope = (typeof(module) !== \"undefined\" && module.exports && typeof(global) !== \"undefined\") ? global : this || window; //helps ensure compatibility with AMD/RequireJS and CommonJS/Node\n(_gsScope._gsQueue || (_gsScope._gsQueue = [])).push( function() {\n\n\t\"use strict\";\n\n\t_gsScope._gsDefine(\"easing.CustomWiggle\", [\"easing.CustomEase\", \"easing.Ease\"], function(CustomEase, Ease) {\n\n\n\t\tvar eases = {\n\t\t\t\teaseOut: new CustomEase(\"\", \"M0,1,C0.7,1,0.6,0,1,0\"),\n\t\t\t\teaseInOut: new CustomEase(\"\", \"M0,0,C0.104,0,0.242,1,0.444,1,0.644,1,0.608,0,1,0\"),\n\t\t\t\tanticipate: new CustomEase(\"\", \"M0,0,C0,0.222,0.024,0.386,0.06,0.402,0.181,0.455,0.647,0.646,0.7,0.67,0.9,0.76,1,0.846,1,1\"),\n\t\t\t\tuniform: new CustomEase(\"\", \"M0,0,C0,0.95,0.01,1,0.01,1,0.01,1,1,1,1,1,1,1,1,0.01,1,0\")\n\t\t\t},\n\t\t\t_linearEase = new CustomEase(), //linear\n\t\t\t_parseEase = function(ease, invertNonCustomEases) {\n\t\t\t\tease = ease.getRatio ? ease : Ease.map[ease] || new CustomEase(\"\", ease);\n\t\t\t\treturn (ease.rawBezier || !invertNonCustomEases) ? ease : {getRatio:function(n) { return 1 - ease.getRatio(n); }};\n\t\t\t},\n\n\n\t\t\tCustomWiggle = function(id, vars) {\n\t\t\t\tthis.vars = vars || {};\n\t\t\t\tCustomEase.call(this, id);\n\t\t\t\tthis.update(this.vars);\n\t\t\t},\n\t\t\tp;\n\n\t\tCustomWiggle.prototype = p = new CustomEase();\n\t\tp.constructor = CustomWiggle;\n\n\t\tp.update = function(vars) {\n\t\t\tvars = vars || this.vars;\n\t\t\tvar wiggles = (vars.wiggles || 10) | 0,\n\t\t\t\tinc = 1 / wiggles,\n\t\t\t\tx = inc / 2,\n\t\t\t\tanticipate = (vars.type === \"anticipate\"),\n\t\t\t\tyEase = eases[vars.type] || eases.easeOut,\n\t\t\t\txEase = _linearEase,\n\t\t\t\trnd = 1000,\n\t\t\t\tnextX, nextY, angle, handleX, handleY, easedX, y, path, i;\n\t\t\tif (anticipate) { //the anticipate ease is actually applied on the x-axis (timing) and uses easeOut for amplitude.\n\t\t\t\txEase = yEase;\n\t\t\t\tyEase = eases.easeOut;\n\t\t\t}\n\t\t\tif (vars.timingEase) {\n\t\t\t\txEase = _parseEase(vars.timingEase);\n\t\t\t}\n\t\t\tif (vars.amplitudeEase) {\n\t\t\t\tyEase = _parseEase(vars.amplitudeEase, true);\n\t\t\t}\n\t\t\teasedX = xEase.getRatio(x);\n\t\t\ty = anticipate ? -yEase.getRatio(x) : yEase.getRatio(x);\n\t\t\tpath = [0, 0, easedX / 4, 0, easedX / 2, y, easedX, y];\n\n\t\t\tif (vars.type === \"random\") { //if we just select random values on the y-axis and plug them into the \"normal\" algorithm, since the control points are always straight horizontal, it creates a bit of a slowdown at each anchor which just didn't seem as desirable, so we switched to an algorithm that bends the control points to be more in line with their context.\n\t\t\t\tpath.length = 4;\n\t\t\t\tnextX = xEase.getRatio(inc);\n\t\t\t\tnextY = Math.random() * 2 - 1;\n\t\t\t\tfor (i = 2; i < wiggles; i++) {\n\t\t\t\t\tx = nextX;\n\t\t\t\t\ty = nextY;\n\t\t\t\t\tnextX = xEase.getRatio(inc * i);\n\t\t\t\t\tnextY = Math.random() * 2 - 1;\n\t\t\t\t\tangle = Math.atan2(nextY - path[path.length - 3], nextX - path[path.length - 4]);\n\t\t\t\t\thandleX = Math.cos(angle) * inc;\n\t\t\t\t\thandleY = Math.sin(angle) * inc;\n\t\t\t\t\tpath.push(x - handleX, y - handleY, x, y, x + handleX, y + handleY);\n\t\t\t\t}\n\t\t\t\tpath.push(nextX, 0, 1, 0);\n\t\t\t} else {\n\t\t\t\tfor (i = 1; i < wiggles; i++) {\n\t\t\t\t\tpath.push(xEase.getRatio(x + inc / 2), y);\n\t\t\t\t\tx += inc;\n\t\t\t\t\ty = ((y > 0) ? -1 : 1) * (yEase.getRatio(i * inc));\n\t\t\t\t\teasedX = xEase.getRatio(x);\n\t\t\t\t\tpath.push(xEase.getRatio(x - inc / 2), y, easedX, y);\n\t\t\t\t}\n\t\t\t\tpath.push(xEase.getRatio(x + inc / 4), y, xEase.getRatio(x + inc / 4), 0, 1, 0);\n\t\t\t}\n\t\t\ti = path.length;\n\t\t\twhile (--i > -1) {\n\t\t\t\tpath[i] = ((path[i] * rnd) | 0) / rnd; //round values to avoid odd strings for super tiny values\n\t\t\t}\n\t\t\tpath[2] = \"C\" + path[2];\n\t\t\tthis.setData(\"M\" + path.join(\",\"));\n\t\t};\n\n\t\tCustomWiggle.create = function (id, vars) {\n\t\t\treturn new CustomWiggle(id, vars);\n\t\t};\n\n\t\tCustomWiggle.version = \"0.2.1\";\n\t\tCustomWiggle.eases = eases;\n\n\t\treturn CustomWiggle;\n\n\t}, true);\n\n\n}); if (_gsScope._gsDefine) { _gsScope._gsQueue.pop()(); }\n\n//export to AMD/RequireJS and CommonJS/Node (precursor to full modular build system coming at a later date)\n(function(name) {\n\t\"use strict\";\n\tvar getGlobal = function() {\n\t\treturn (_gsScope.GreenSockGlobals || _gsScope)[name];\n\t};\n\tif (typeof(module) !== \"undefined\" && module.exports) { //node\n\t\trequire(\"./CustomEase\");\n\t\trequire(\"gsap/TweenLite\");\n\t\tmodule.exports = getGlobal();\n\t} else if (typeof(define) === \"function\" && define.amd) { //AMD\n\t\tdefine([\"gsap/TweenLite\", \"./CustomEase\"], getGlobal);\n\t}\n}(\"CustomWiggle\"));","/*!\n * VERSION: 0.9.9\n * DATE: 2015-04-28\n * UPDATES AND DOCS AT: http://greensock.com\n *\n * @license Copyright (c) 2008-2015, GreenSock. All rights reserved.\n * ThrowPropsPlugin is a Club GreenSock membership benefit; You must have a valid membership to use\n * this code without violating the terms of use. Visit http://greensock.com/club/ to sign up or get more details.\n * This work is subject to the software agreement that was issued with your membership.\n * \n * @author: Jack Doyle, jack@greensock.com\n */\nvar _gsScope=\"undefined\"!=typeof module&&module.exports&&\"undefined\"!=typeof global?global:this||window;(_gsScope._gsQueue||(_gsScope._gsQueue=[])).push(function(){\"use strict\";_gsScope._gsDefine(\"plugins.ThrowPropsPlugin\",[\"plugins.TweenPlugin\",\"TweenLite\",\"easing.Ease\",\"utils.VelocityTracker\"],function(t,e,i,r){var s,n,o,a,l=function(){t.call(this,\"throwProps\"),this._overwriteProps.length=0},h=999999999999999,u=1e-10,f=_gsScope._gsDefine.globals,c=!1,p={x:1,y:1,z:2,scale:1,scaleX:1,scaleY:1,rotation:1,rotationZ:1,rotationX:2,rotationY:2,skewX:1,skewY:1,xPercent:1,yPercent:1},_=function(t,e,i,r){for(var s,n,o=e.length,a=0,l=h;--o>-1;)s=e[o],n=s-t,0>n&&(n=-n),l>n&&s>=r&&i>=s&&(a=o,l=n);return e[a]},d=function(t,e,i,r){if(\"auto\"===t.end)return t;i=isNaN(i)?h:i,r=isNaN(r)?-h:r;var s=\"function\"==typeof t.end?t.end(e):t.end instanceof Array?_(e,t.end,i,r):Number(t.end);return s>i?s=i:r>s&&(s=r),{max:s,min:s,unitFactor:t.unitFactor}},g=function(t,e,i){for(var r in e)void 0===t[r]&&r!==i&&(t[r]=e[r]);return t},m=l.calculateChange=function(t,r,s,n){null==n&&(n=.05);var o=r instanceof i?r:r?new i(r):e.defaultEase;return s*n*t/o.getRatio(n)},v=l.calculateDuration=function(t,r,s,n,o){o=o||.05;var a=n instanceof i?n:n?new i(n):e.defaultEase;return Math.abs((r-t)*a.getRatio(o)/s/o)},y=l.calculateTweenDuration=function(t,s,n,o,a,h){if(\"string\"==typeof t&&(t=e.selector(t)),!t)return 0;null==n&&(n=10),null==o&&(o=.2),null==a&&(a=1),t.length&&(t=t[0]||t);var f,p,_,y,x,T,w,b,P,S,k=0,O=9999999999,C=s.throwProps||s,R=s.ease instanceof i?s.ease:s.ease?new i(s.ease):e.defaultEase,A=isNaN(C.checkpoint)?.05:Number(C.checkpoint),M=isNaN(C.resistance)?l.defaultResistance:Number(C.resistance);for(f in C)\"resistance\"!==f&&\"checkpoint\"!==f&&\"preventOvershoot\"!==f&&(p=C[f],\"object\"!=typeof p&&(P=P||r.getByTarget(t),P&&P.isTrackingProp(f)?p=\"number\"==typeof p?{velocity:p}:{velocity:P.getVelocity(f)}:(y=Number(p)||0,_=y*M>0?y/M:y/-M)),\"object\"==typeof p&&(void 0!==p.velocity&&\"number\"==typeof p.velocity?y=Number(p.velocity)||0:(P=P||r.getByTarget(t),y=P&&P.isTrackingProp(f)?P.getVelocity(f):0),x=isNaN(p.resistance)?M:Number(p.resistance),_=y*x>0?y/x:y/-x,T=\"function\"==typeof t[f]?t[f.indexOf(\"set\")||\"function\"!=typeof t[\"get\"+f.substr(3)]?f:\"get\"+f.substr(3)]():t[f]||0,w=T+m(y,R,_,A),void 0!==p.end&&(p=d(p,w,p.max,p.min),(h||c)&&(C[f]=g(p,C[f],\"end\"))),void 0!==p.max&&w>Number(p.max)+u?(S=p.unitFactor||l.defaultUnitFactors[f]||1,b=T>p.max&&p.min!==p.max||y*S>-15&&45>y*S?o+.1*(n-o):v(T,p.max,y,R,A),O>b+a&&(O=b+a)):void 0!==p.min&&Number(p.min)-u>w&&(S=p.unitFactor||l.defaultUnitFactors[f]||1,b=p.min>T&&p.min!==p.max||y*S>-45&&15>y*S?o+.1*(n-o):v(T,p.min,y,R,A),O>b+a&&(O=b+a)),b>k&&(k=b)),_>k&&(k=_));return k>O&&(k=O),k>n?n:o>k?o:k},x=l.prototype=new t(\"throwProps\");return x.constructor=l,l.version=\"0.9.9\",l.API=2,l._autoCSS=!0,l.defaultResistance=100,l.defaultUnitFactors={time:1e3,totalTime:1e3},l.track=function(t,e,i){return r.track(t,e,i)},l.untrack=function(t,e){r.untrack(t,e)},l.isTracking=function(t,e){return r.isTracking(t,e)},l.getVelocity=function(t,e){var i=r.getByTarget(t);return i?i.getVelocity(e):0/0},l._cssRegister=function(){var t=f.com.greensock.plugins.CSSPlugin;if(t){var e=t._internals,i=e._parseToProxy,o=e._setPluginRatio,a=e.CSSPropTween;e._registerComplexSpecialProp(\"throwProps\",{parser:function(t,e,h,u,f,c){c=new l;var _,d,g,m,v,y={},x={},T={},w={},b={},P={};n={};for(g in e)\"resistance\"!==g&&\"preventOvershoot\"!==g&&(d=e[g],\"object\"==typeof d?(void 0!==d.velocity&&\"number\"==typeof d.velocity?y[g]=Number(d.velocity)||0:(v=v||r.getByTarget(t),y[g]=v&&v.isTrackingProp(g)?v.getVelocity(g):0),void 0!==d.end&&(w[g]=d.end),void 0!==d.min&&(x[g]=d.min),void 0!==d.max&&(T[g]=d.max),d.preventOvershoot&&(P[g]=!0),void 0!==d.resistance&&(_=!0,b[g]=d.resistance)):\"number\"==typeof d?y[g]=d:(v=v||r.getByTarget(t),y[g]=v&&v.isTrackingProp(g)?v.getVelocity(g):d||0),p[g]&&u._enableTransforms(2===p[g]));m=i(t,y,u,f,c),s=m.proxy,y=m.end;for(g in s)n[g]={velocity:y[g],min:x[g],max:T[g],end:w[g],resistance:b[g],preventOvershoot:P[g]};return null!=e.resistance&&(n.resistance=e.resistance),e.preventOvershoot&&(n.preventOvershoot=!0),f=new a(t,\"throwProps\",0,0,m.pt,2),u._overwriteProps.pop(),f.plugin=c,f.setRatio=o,f.data=m,c._onInitTween(s,n,u._tween),f}})}},l.to=function(t,i,r,l,h){i.throwProps||(i={throwProps:i}),0===h&&(i.throwProps.preventOvershoot=!0),c=!0;var u=new e(t,l||1,i);return u.render(0,!0,!0),u.vars.css?(u.duration(y(s,{throwProps:n,ease:i.ease},r,l,h)),u._delay&&!u.vars.immediateRender?u.invalidate():o._onInitTween(s,a,u),c=!1,u):(u.kill(),u=new e(t,y(t,i,r,l,h),i),c=!1,u)},x._onInitTween=function(t,e,i){this.target=t,this._props=[],o=this,a=e;var s,n,l,h,u,f,p,_,v,y=i._ease,x=isNaN(e.checkpoint)?.05:Number(e.checkpoint),T=i._duration,w=e.preventOvershoot,b=0;for(s in e)if(\"resistance\"!==s&&\"checkpoint\"!==s&&\"preventOvershoot\"!==s){if(n=e[s],\"number\"==typeof n)u=Number(n)||0;else if(\"object\"!=typeof n||isNaN(n.velocity)){if(v=v||r.getByTarget(t),!v||!v.isTrackingProp(s))throw\"ERROR: No velocity was defined in the throwProps tween of \"+t+\" property: \"+s;u=v.getVelocity(s)}else u=Number(n.velocity);f=m(u,y,T,x),_=0,h=\"function\"==typeof t[s],l=h?t[s.indexOf(\"set\")||\"function\"!=typeof t[\"get\"+s.substr(3)]?s:\"get\"+s.substr(3)]():t[s],\"object\"==typeof n&&(p=l+f,void 0!==n.end&&(n=d(n,p,n.max,n.min),c&&(e[s]=g(n,e[s],\"end\"))),void 0!==n.max&&p>Number(n.max)?w||n.preventOvershoot?f=n.max-l:_=n.max-l-f:void 0!==n.min&&Number(n.min)>p&&(w||n.preventOvershoot?f=n.min-l:_=n.min-l-f)),this._overwriteProps[b]=s,this._props[b++]={p:s,s:l,c1:f,c2:_,f:h,r:!1}}return!0},x._kill=function(e){for(var i=this._props.length;--i>-1;)null!=e[this._props[i].p]&&this._props.splice(i,1);return t.prototype._kill.call(this,e)},x._roundProps=function(t,e){for(var i=this._props,r=i.length;--r>-1;)(t[i[r].p]||t.throwProps)&&(i[r].r=e)},x.setRatio=function(t){for(var e,i,r=this._props.length;--r>-1;)e=this._props[r],i=e.s+e.c1*t+e.c2*t*t,e.r&&(i=Math.round(i)),e.f?this.target[e.p](i):this.target[e.p]=i},t.activate([l]),l},!0),_gsScope._gsDefine(\"utils.VelocityTracker\",[\"TweenLite\"],function(t){var e,i,r,s,n=/([A-Z])/g,o={},a={x:1,y:1,z:2,scale:1,scaleX:1,scaleY:1,rotation:1,rotationZ:1,rotationX:2,rotationY:2,skewX:1,skewY:1,xPercent:1,yPercent:1},l=document.defaultView?document.defaultView.getComputedStyle:function(){},h=function(t,e,i){var r=(t._gsTransform||o)[e];return r||0===r?r:(t.style[e]?r=t.style[e]:(i=i||l(t,null))?r=i[e]||i.getPropertyValue(e)||i.getPropertyValue(e.replace(n,\"-$1\").toLowerCase()):t.currentStyle&&(r=t.currentStyle[e]),parseFloat(r)||0)},u=t.ticker,f=function(t,e,i){this.p=t,this.f=e,this.v1=this.v2=0,this.t1=this.t2=u.time,this.css=!1,this.type=\"\",this._prev=null,i&&(this._next=i,i._prev=this)},c=function(){var t,i,n=e,o=u.time;if(o-r>=.03)for(s=r,r=o;n;){for(i=n._firstVP;i;)t=i.css?h(n.target,i.p):i.f?n.target[i.p]():n.target[i.p],(t!==i.v1||o-i.t1>.15)&&(i.v2=i.v1,i.v1=t,i.t2=i.t1,i.t1=o),i=i._next;n=n._next}},p=function(t){this._lookup={},this.target=t,this.elem=t.style&&t.nodeType?!0:!1,i||(u.addEventListener(\"tick\",c,null,!1,-100),r=s=u.time,i=!0),e&&(this._next=e,e._prev=this),e=this},_=p.getByTarget=function(t){for(var i=e;i;){if(i.target===t)return i;i=i._next}},d=p.prototype;return d.addProp=function(e,i){if(!this._lookup[e]){var r=this.target,s=\"function\"==typeof r[e],n=s?this._altProp(e):e,o=this._firstVP;this._firstVP=this._lookup[e]=this._lookup[n]=o=new f(n!==e&&0===e.indexOf(\"set\")?n:e,s,o),o.css=this.elem&&(void 0!==this.target.style[o.p]||a[o.p]),o.css&&a[o.p]&&!r._gsTransform&&t.set(r,{x:\"+=0\",overwrite:!1}),o.type=i||o.css&&0===e.indexOf(\"rotation\")?\"deg\":\"\",o.v1=o.v2=o.css?h(r,o.p):s?r[o.p]():r[o.p]}},d.removeProp=function(t){var e=this._lookup[t];e&&(e._prev?e._prev._next=e._next:e===this._firstVP&&(this._firstVP=e._next),e._next&&(e._next._prev=e._prev),this._lookup[t]=0,e.f&&(this._lookup[this._altProp(t)]=0))},d.isTrackingProp=function(t){return this._lookup[t]instanceof f},d.getVelocity=function(t){var e,i,r,s=this._lookup[t],n=this.target;if(!s)throw\"The velocity of \"+t+\" is not being tracked.\";return e=s.css?h(n,s.p):s.f?n[s.p]():n[s.p],i=e-s.v2,(\"rad\"===s.type||\"deg\"===s.type)&&(r=\"rad\"===s.type?2*Math.PI:360,i%=r,i!==i%(r/2)&&(i=0>i?i+r:i-r)),i/(u.time-s.t2)},d._altProp=function(t){var e=t.substr(0,3),i=(\"get\"===e?\"set\":\"set\"===e?\"get\":e)+t.substr(3);return\"function\"==typeof this.target[i]?i:t},p.getByTarget=function(i){var r=e;for(\"string\"==typeof i&&(i=t.selector(i)),i.length&&i!==window&&i[0]&&i[0].style&&!i.nodeType&&(i=i[0]);r;){if(r.target===i)return r;r=r._next}},p.track=function(t,e,i){var r=_(t),s=e.split(\",\"),n=s.length;for(i=(i||\"\").split(\",\"),r||(r=new p(t));--n>-1;)r.addProp(s[n],i[n]||i[0]);return r},p.untrack=function(t,i){var r=_(t),s=(i||\"\").split(\",\"),n=s.length;if(r){for(;--n>-1;)r.removeProp(s[n]);r._firstVP&&i||(r._prev?r._prev._next=r._next:r===e&&(e=r._next),r._next&&(r._next._prev=r._prev))}},p.isTracking=function(t,e){var i=_(t);return i?!e&&i._firstVP?!0:i.isTrackingProp(e):!1},p},!0)}),_gsScope._gsDefine&&_gsScope._gsQueue.pop()(),function(t){\"use strict\";var e=function(){return(_gsScope.GreenSockGlobals||_gsScope)[t]};\"function\"==typeof define&&define.amd?define([\"TweenLite\"],e):\"undefined\"!=typeof module&&module.exports&&(1,module.exports=e())}(\"ThrowPropsPlugin\");","\n\n// import {TweenMax, TweenLite,TimelineMax, CSSPLugin } from \"gsap\";\n\n// import { ThrowPropsPlugin} from \"gsap\";\n\n\nimport { remove, remove1, remove1RandomItem, shuffle, getNextShuffledItemGenerator } from './js/lib/shuffle'\n\nimport { flatten } from './js/lib/helpers'\n\nimport {selector, fSelector, selectMultiple} from './js/lib/selector'\nimport CustomEase  from '/js/lib/CustomEase.js'\n// import{ CustomWiggle } from '/js/lib/CustomWiggle.js'\nimport CustomWiggle from '/js/lib/CustomWiggle.js';\n\n// import{ CustomWiggle } from '/js/lib/CustomWiggle.js'\nimport { ThrowPropsPlugin } from '/js/lib/ThrowPropsPlugin.js'\n\n\n\n// const CustomWiggle = require('/js/lib/CustomWiggle.js')\n// const ThrowPropsPlugin = require( 'gsap/ThrowPropsPlugin');\n\n// import {ass} from './js/dope'\n\n// console.log(ass)\n\nconst main = (event) => {\n// const flowers = document.querySelectorAll('.cls-187');\nconst add = (a,b,c) => a + b +c \nconst curriedAdd = a => b => c => add(a,b,c)\nconst curry = (fn,...args) => args.length >= fn.length \n  ? fn(...args)\n  : curry.bind(null,fn,...args)\n\n\nconst selectMultiFromDocument = selectMultiple(document)\nconst flowers = selectMultiFromDocument( '.cls-186', '.cls-186' )\nconst peak = selectMultiFromDocument('.cls-182', '.cls-188');\nconst clouds = selector('g#clouds');\n\nconst cloud1 = document.querySelector('g#cloud1');\nconst cloud2Shadow = document.querySelector(\"g#cloud2-shadow\");\nconst cloud1Shadow = document.querySelector(\"g#cloud1-shadow\");\n\nconst closedEgg = document.querySelector('path.cls-198.closed-egg');\nconsole.log(closedEgg);\nconst flowersArray = selector('.cls-186');\nconst yellowFlowersArray = selector('.cls-187');\nconst eyes = selectMultiFromDocument('#eyes1', '#eyes2', '#eyes3','#eyes4', '#eyes5', '#eyes6', '#eyes7', '#eyes8', '#eyes9', '#eyes10', '#eyes11', '#eyes12', '#eyes13', '#eyes14');\n// console.log(eyes);\n\nconst eggs = selectMultiFromDocument('#egg1', '#egg2', '#egg3','#egg4', '#egg5', '#egg6', '#egg7', '#egg8', '#egg9', '#egg10');\n// console.log(eggs);\n\n\nfunction clearStage() {\n  var clearTl = new TimelineMax();\n  clearTl\n  .set(flowersArray, {autoAlpha: 0})\n  .set(yellowFlowersArray, {autoAlpha: 0})\n  // .set(clouds, {left:-200, opacity:0});\n  .set(cloud1, {x:'-1200', autoAlpha:0.5})\n  .set(cloud1Shadow, {x:'-2400', autoAlpha:1})\n\n  .set(cloud2, {x:'-=3600', autoAlpha:0.5})\n  .set(cloud2Shadow, {x: '-=1400', autoAlpha:1})\n  // .set(\"#chickenHead\", {autoAlpha: 0})\n  .set(\"#chickenHead2\", {autoAlpha: 0})\n  .set(closedEgg, { fill: \"#F0D7BF\" })\n  // .set(\"#chickenBody\", {autoAlpha: 0})\n  \n  // .set(\"#topEggShell\", {y:120, rotate: 100})\n  .set(\"#topEggShell2\", {y:45})\n  \n  // .set(\"#topEggShellb\", {y:120, rotate: 100})\n  \n  return clearTl;\n  }\n\n  const cloudShadow = selectMultiFromDocument(\"g#cloud1-shadow\", \"g#cloud1\");\n  // console.log('classy',cloudShadow);\n \n  function enterFloorVegetation() {\n    const enterFloorVegetationTl = new TimelineMax();\n          enterFloorVegetationTl\n          .fromTo(flowersArray, 1, {autoAlpha:0, scaleY:0.2, transformOrigin: 'center center'}, {autoAlpha:1, scaleY:1, transformOrigin: 'center center', ease: Back.easeInOut, onComplete: startBlinking})\n          .fromTo(yellowFlowersArray, 1, {autoAlpha:0, scaleX:0.2, transformOrigin: 'center center'}, {autoAlpha:1, scaleX:1, transformOrigin: 'center center', ease: Back.easeInOut}, \"-=0.9\")\n\n          return enterFloorVegetationTl;\n  }\n\n\nconst flowerDance = () => {\n  const removeFirstItems = (arr,count) => remove( count )( 0 )( shuffle(flatten(arr)) )\n  \n\n  const [removeItems1,leftOver1] = removeFirstItems( flowers, 10 )\n  const [removeItems2,leftOver2] = removeFirstItems( leftOver1, 50 )\n\n    \n  return new TimelineMax({repeat:-1, repeatDelay: 1})\n  .to(removeItems1, 1, {throwProps:{rotation:360}})\n  // .to(removeItems1, 1, {y:0, rotation:32, x:'-=1'}, 0)\n  .to(removeItems2, 1, {throwProps:{rotation:360}}, '-=0.5')\n  // .to(removeItems2, 1, {y:0, rotation:32, x:'+=1'}, '-=0.2')\n    \n}\n\n\n// not used, nor finished\nfunction birdsEating() {\n  var birdsEatingTl = new TimelineMax({repeat:-1, repeatDelay: 4});\n  birdsEatingTl\n  // .set(peak, {rotation:12})\n  // .set(peak, { rotation: 0})\n  .to(peak, 1.4, {y:'+=3'}, '+=0.1')\n  .to(peak, 1.4, {y:'-=3'}, '+=0.1')\n  \n  return birdsEatingTl;\n}\n\n\n  function startBlinking() {\n  \n    var birdBlinksTl = new TimelineMax({repeat:-1, repeatDelay: 10});\n  \n\n    shuffle(eyes).forEach( eye =>birdBlinksTl\n      .set(eye, {autoAlpha:0})\n      .set(eye, {autoAlpha:1}, '+=0.2')\n      .set(eye, {autoAlpha:0}, '+=0.2')\n      .set(eye, {autoAlpha:1}, '+=0.2')\n    )\n    return birdBlinksTl;\n  }\n\n\n\n\n  //clouds moving \n  function cloudsMoving() {\n const cloudsMovingTl = new TimelineMax({repeat:-1}, Math.random()*5);\n        cloudsMovingTl\n        .to(cloud1, 14, {autoAlpha:1})\n        .to(cloud1Shadow, 14, {autoAlpha:1})\n\n        .to(cloud2, 14, {autoAlpha:1})\n        .to(cloud2Shadow, 14, {autoAlpha:1})\n\n         .to(cloud1, 40 , {x:\"+=3000\", ease:Linear.easeNone}, 0)\n         .to(cloud1Shadow, 40 , {x:\"+=3000\", ease:Linear.easeNone}, 0)\n         .to(cloud2, 60 , {x:\"+=3000\", ease:Linear.easeNone}, 0)\n         .to(cloud2Shadow, 60 , {x:\"+=3000\", ease:Linear.easeNone}, 0)\n         \n\n        return cloudsMovingTl;\n  }\n\n\n  function bunnyInTheBack() {\n    const bunnyInTheBackTl = new TimelineMax({repeat:-1, repeatDelay: 10});\n    bunnyInTheBackTl\n    .to('#bunnyInTheBack', 1, {y:85})\n    .to('#bunnyInTheBack', 1, {y:\"-=85\"})\n    return bunnyInTheBackTl;\n  }\n\n\n  function eggsShaking() {\n    const eggsShakingTl = new TimelineMax({repeat:-1, repeatDelay: 3});\n    eggsShakingTl\n    shuffle(eggs).forEach( egg =>eggsShakingTl\n      .to(egg, 0.1, {x:\"+=20\", yoyo:true, repeat:5}, '+=5')\n    )\n    // .to(\"#egg6\", 1, {x: 400});\n    return eggsShakingTl;\n  }\n\n\n\n\n  // TweenMax.to(\"#basket\", 4, {x:10, y:10, ease: \"wiggle\"});\n\n  // var tl = new TimelineMax({repeat:50, repeatDelay:1, delay:1});\n  // tl.to(\"#basket\", 4, {x:10, y:10, ease: \"wiggle\"});\n\n  \n\n\n  function bunnyHand() {\n    // function wiggle(id, duration) {\n    //   var tl = new TimelineLite();\n    //   tl.to(\"#\" + id, duration, {rotation:30, ease:\"Wiggle.easeOut\" })\n    //   return tl;\n    // }\n    CustomWiggle.create(\"theWiggle\", {wiggles:2});\n    const bunnyHandTl = new TimelineMax();\n    bunnyHandTl\n      .to(\"#bunnyHand\", 0.5, {x: -10})\n      .to(\"#bunnyHand\", 0.5, {x: 10})\n      .to(\"#basket\", 1, {y:-10, rotation:10, ease:\"theWiggle\"}, \"-=0.6\")\n      .to(\"#redEggBasket\", 2 ,{x:10, y: 100, ease:Power2.easeOut}, \"-=0.8\")\n      \n      return bunnyHandTl;\n    \n  }\n\n  function eggPopping() {\n\n  }\n\n\n\n\n  function go() {\n    console.log('hey...')\n    var masterTl  = new TimelineMax();\n    masterTl \n    .add(clearStage(), 'scene-clear-stage')\n    .add(enterFloorVegetation(), 'scene-floor-vegetation')\n    // .add(birdsEating(), \"birds-eating\")\n    .add(cloudsMoving(),  'clouds-moving')\n    .add( flowerDance(), 0)\n    .add(bunnyHand(), 'bunny-hand')\n    \n    .add(bunnyInTheBack(), 'bunny-in-the-back')\n    .add(eggsShaking(), 'eggs-shaking')\n    ;\n    \n  }\n \n  go();\n}\n\ndocument.addEventListener('DOMContentLoaded',main)\n\n\n\n\n"]}