{"version":3,"sources":["node_modules/dope/dope.js","js/app.js"],"names":["main","event","eyes","document","querySelectorAll","selector","query","context","slice","call","fSelector","flatten","multiList","reduce","acc","item","concat","selectMultiple","queries","map","add","a","b","c","curriedAdd","curry","fn","args","length","bind","selectMultiFromDocument","flowers","peak","clouds","console","log","flowersArray","yellowFlowersArray","clearStage","clearTl","TimelineMax","set","autoAlpha","left","opacity","enterFloorVegetation","enterFloorVegetationTl","fromTo","scaleY","transformOrigin","ease","Back","easeInOut","onComplete","startBlinking","scaleX","remove","arrCopy","arr","thisisWhatIsSpliceOut","splice","start","count","whatRemains","remove1","remove1RandomItem","Math","floor","random","shuffle","tempArr","removedItem","flowerDance","removeFirstItems","removeItems1","leftOver1","removeItems2","leftOver2","repeat","repeatDelay","to","throwProps","rotation","birdsEating","birdsEatingTl","y","birdBlinksTl","cloudsMoving","cloudsMovingTl","x","Linear","easeNone","go","masterTl","addEventListener"],"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","file":"app.3ed94a0c.map","sourcesContent":["/*!\n * dope 2.2.2\n * http://github.com/ryanve/dope\n * MIT License (c) Ryan Van Etten \n */\n\r\n/*jshint expr:true, sub:true, supernew:true, debug:true, node:true, boss:true, devel:true, evil:true, \r\n  laxcomma:true, eqnull:true, undef:true, unused:true, browser:true, jquery:true, maxerr:10 */\r\n\r\n(function(root, name, make) {\r\n  if (typeof module != 'undefined' && module.exports) module.exports = make();\n  else root[name] = make();\r\n}(this, 'dope', function() {\r\n\r\n  // developers.google.com/closure/compiler/docs/api-tutorial3\r\n  // developers.google.com/closure/compiler/docs/js-for-compiler\r\n\r\n  var doc = document\r\n    , xports = {}\r\n    , effins = xports['fn'] = {}\r\n    , owns = xports.hasOwnProperty\r\n    , DMS = typeof DOMStringMap != 'undefined'\r\n    , parseJSON = typeof JSON != 'undefined' && JSON.parse\r\n    , queryMethod = 'querySelectorAll' \r\n    , QSA = !!doc[queryMethod] || !(queryMethod = 'getElementsByTagName')\r\n    , queryEngine = function(s, root) {\r\n        return s ? (root || doc)[queryMethod](s) : []; \r\n      }\r\n    , camels = /([a-z])([A-Z])/g // lowercase next to uppercase\r\n    , dashB4 = /-(.)/g // finds chars after hyphens\r\n    , csvSsv = /\\s*[\\s\\,]+\\s*/ // splitter for comma *or* space-separated values\r\n    , cleanAttr = /^[\\[\\s]+|\\s+|[\\]\\s]+$/g // replace whitespace, trim [] brackets\r\n    , cleanPre = /^[\\[\\s]?(data-)?|\\s+|[\\]\\s]?$/g // replace whitespace, trim [] brackets, trim prefix\r\n    , escDots = /\\\\*\\./g // find periods w/ and w/o preceding backslashes\r\n    , ssv = /\\s+/\r\n    , trimmer = /^\\s+|\\s+$/\r\n    , trim = ''.trim ? function(s) {\r\n        return null == s ? '' : s.trim(); \r\n      } : function(s) {\r\n        return null == s ? '' : s.replace(trimmer, ''); \r\n      };\r\n  \r\n  /**\r\n   * @return {string}\r\n   */\r\n  function camelHandler(all, letter) { \r\n    return letter.toUpperCase();\r\n  }\r\n\r\n  /**\r\n   * Convert  'data-pulp-fiction' to 'pulpFiction'. Non-scalars return an\r\n   * empty string. number|boolean coerces to string. (opposite: datatize())\r\n   * @param {string|number|boolean|*} s\r\n   * @return {string}\r\n   */\r\n  function camelize(s) {\r\n    if (typeof s != 'string') return typeof s == 'number' || typeof s == 'boolean' ? '' + s : ''; \r\n    // Remove data- prefix and convert remaining dashed string to camelCase:\r\n    return s.replace(cleanPre, '').replace(dashB4, camelHandler); // -a to A\r\n  }\r\n\r\n  /**\r\n   * Convert 'pulpFiction' to 'data-pulp-fiction' OR 47 to 'data-47'\r\n   * Invalid types return an empty string. (opposite: camelize())\r\n   * @param {string|number|*} s\r\n   * @return {string}\r\n   */\r\n  function datatize(s) {\r\n    if (typeof s == 'string') s = s.replace(cleanPre, '$1').replace(camels, '$1-$2'); // aA to a-A\r\n    else s = typeof s == 'number'  ? '' + s : '';\r\n    return s ? ('data-' + s.toLowerCase()) : s;\r\n  }\r\n\r\n  /**\r\n   * Convert a stringified primitive into its correct type.\r\n   * @param {string|*} s\r\n   */\r\n  function parse(s) {\r\n    var n; // undefined, or becomes number\r\n    return typeof s != 'string' || !s ? s\r\n      : 'false' === s ? false\r\n      : 'true' === s ? true\r\n      : 'null' === s ? null\r\n      : 'undefined' === s || (n = (+s)) || 0 === n || 'NaN' === s ? n\r\n      : s;\r\n  }\r\n\r\n  /**\r\n   * @param {Object|Array|*} list\r\n   * @param {Function} fn   \r\n   * @param {(Object|*)=} scope\r\n   * @param {boolean=} compact \r\n   * @return {Array}\r\n   */\r\n  function map(list, fn, scope, compact) {\r\n    var l, i = 0, v, u = 0, ret = [];\r\n    if (list == null) return ret;\r\n    compact = true === compact;\r\n    for (l = list.length; i < l;) {\r\n      v = fn.call(scope, list[i], i++, list);\r\n      if (v || !compact) ret[u++] = v;\r\n    }\r\n    return ret;\r\n  }\r\n  \r\n  /** \r\n   * special-case DOM-node iterator optimized for internal use\r\n   * @param {Object|Array} ob\r\n   * @param {Function} fn\r\n   * @param {*=} param\r\n   */\r\n  function eachNode(ob, fn, param) {\r\n    for (var l = ob.length, i = 0; i < l; i++)\r\n      ob[i] && ob[i].nodeType && fn(ob[i], param);\r\n    return ob;\r\n  }\r\n\r\n  /**\r\n   * internal-use function to iterate a node's attributes\r\n   * @param {Object} el\r\n   * @param {Function} fn\r\n   * @param {(boolean|*)=} exp\r\n   */\r\n  function eachAttr(el, fn, exp) {\r\n    var test, n, a, i, l;\r\n    if (!el.attributes) return;\r\n    test = typeof exp == 'boolean' ? /^data-/ : test;\r\n    for (i = 0, l = el.attributes.length; i < l;) {\r\n      if (a = el.attributes[i++]) {\r\n        n = '' + a.name;\r\n        test && test.test(n) !== exp || null == a.value || fn.call(el, a.value, n, a);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get object containing an element's data attrs.\r\n   * @param {Element} el\r\n   * @return {DOMStringMap|Object|undefined}\r\n   */\r\n  function getDataset(el) {\r\n    var ob;\r\n    if (!el || 1 !== el.nodeType) return;  // undefined\r\n    if (ob = DMS && el.dataset) return ob; // native\r\n    ob = {}; // Fallback plain object cannot mutate the dataset via reference.\r\n    eachAttr(el, function(v, k) {\r\n      ob[camelize(k)] = '' + v;\r\n    }, true);\r\n    return ob;\r\n  }\r\n\r\n  /**\r\n   * @param {Element} el\r\n   * @param {Object=} ob\r\n   */\r\n  function resetDataset(el, ob) {\r\n    if (!el) return;\r\n    var n, curr = el.dataset;\r\n    if (curr && DMS) {\r\n      if (curr === ob) return;\r\n      for (n in curr) delete curr[n];\r\n    }\r\n    ob && dataset(el, ob);\r\n  }\r\n  \r\n  /**\r\n   * @param {Element} el\r\n   * @param {Object} ob\r\n   * @param {Function} fn\r\n   */\r\n  function setViaObject(el, ob, fn) {\r\n    for (var n in ob) owns.call(ob, n) && fn(el, n, ob[n]);\r\n  }\r\n  \r\n  /**\r\n   * @param {Object|Array|Function} el\r\n   * @param {(string|Object|*)=} k\r\n   * @param {*=} v\r\n   */  \r\n  function attr(el, k, v) {\r\n    el = el.nodeType ? el : el[0];\r\n    if (!el || !el.setAttribute) return;\r\n    k = typeof k == 'function' ? k.call(el) : k;\r\n    if (!k) return;\r\n    if (typeof k == 'object') {\r\n      // SET-multi\r\n      setViaObject(el, k, attr);\r\n    } else {\r\n      if (void 0 === v) {\r\n        // GET\r\n        k = el.getAttribute(k); // repurpose\r\n        return null == k ? v : '' + k; // normalize\r\n      }\r\n      // SET\r\n      v = typeof v == 'function' ? v.call(el) : v;\r\n      v = '' + v; // normalize inputs\r\n      el.setAttribute(k, v);\r\n      return v; // the curr value\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * @param {Object|Array|Function} el\r\n   * @param {(string|Object|*)=} k\r\n   * @param {*=} v\r\n   */  \r\n  function dataset(el, k, v) {\r\n    var exact, kFun = typeof k == 'function';\r\n    el = el.nodeType ? el : el[0];\r\n    if (!el || !el.setAttribute) return;\r\n    if (void 0 === k && v === k) return getDataset(el);\r\n    k = kFun ? k.call(el) : k;\r\n\r\n    if (typeof k == 'object' && (kFun || !(exact = void 0 === v && datatize(k[0])))) {\r\n      // SET-multi\r\n      kFun && deletes(el);\r\n      k && setViaObject(el, k, dataset);\r\n    } else {\r\n      k = exact || datatize(k);\r\n      if (!k) return;\r\n      if (void 0 === v) {\r\n        // GET\r\n        k = el.getAttribute(k); // repurpose\r\n        return null == k ? v : exact ? parse(k) : '' + k; // normalize\r\n      }\r\n      // SET\r\n      v = typeof v == 'function' ? v.call(el) : v;\r\n      v = '' + v; // normalize inputs\r\n      el.setAttribute(k, v);\r\n      return v; // current value\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Element} el\r\n   * @param {(Array|string|number)=} keys\r\n   */\r\n  function deletes(el, keys) {\r\n    var k, i = 0;\r\n    el = el.nodeType ? el : el[0];\r\n    if (!el || !el.removeAttribute)\r\n      return;\r\n    if (void 0 === keys) {\r\n      resetDataset(el); \r\n    } else {\r\n      keys = typeof keys == 'string' ? keys.split(ssv) : [].concat(keys);\r\n      while (i < keys.length) {\r\n        k = datatize(keys[i++]);\r\n        k && el.removeAttribute(k);\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * @param {Element} el\r\n   * @param {Array|string|number} keys\r\n   */\r\n  function removeAttr(el, keys) {\r\n    var i = 0;\r\n    el = el.nodeType ? el : el[0];\r\n    if (el && el.removeAttribute) {\r\n      for (keys = typeof keys == 'string' ? keys.split(ssv) : [].concat(keys); i < keys.length; i++) {\r\n        keys[i] && el.removeAttribute(keys[i]);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert list of attr names or data- keys into a selector.\r\n   * @param {Array|string|number|*} list\r\n   * @param {boolean=} prefix\r\n   * @param {boolean=} join\r\n   * @return {string|Array}\r\n   */\r\n  function toAttrSelector(list, prefix, join) {\r\n    var l, s, i = 0, j = 0, emp = '', arr = [];\r\n    prefix = true === prefix;\r\n    list = typeof list == 'string' ? list.split(csvSsv) : typeof list == 'number' ? '' + list : list;\r\n    for (l = list.length; i < l;) {\r\n      s = list[i++];\r\n      s = prefix ? datatize(s) : s.replace(cleanAttr, emp);\r\n      s && (arr[j++] = s);\r\n    }\r\n    // Escape periods to allow atts like `[data-the.wh_o]`\r\n    // @link api.jquery.com/category/selectors/\r\n    // @link stackoverflow.com/q/13283699/770127\r\n    return false === join ? arr : j ? '[' + arr.join('],[').replace(escDots, '\\\\\\\\.') + ']' : emp;\r\n  }\r\n\r\n  /**\r\n   * Get elements matched by a data key.\r\n   * @param {Array|string} list array or CSV or SSV data keys\r\n   * @return {Array|*}\r\n   */   \r\n  xports['queryData'] = QSA ? function(list, root) {\r\n    // Modern browsers, IE8+\r\n    return false === root ? toAttrSelector(list, true, root) : queryEngine(toAttrSelector(list, true), root);\r\n  } : function(list, root) {\r\n    // == FALLBACK ==\r\n    list = toAttrSelector(list, true, false);\r\n    return false === root ? list : queryAttrFallback(list, root); \r\n  };\r\n  \r\n  /**\r\n   * Get elements matched by an attribute name.\r\n   * @param {Array|string} list array or CSV or SSV data keys\r\n   * @return {Array|*}\r\n   */   \r\n  xports['queryAttr'] = QSA ? function(list, root) {\r\n    // Modern browsers, IE8+\r\n    return false === root ? toAttrSelector(list, root, root) : queryEngine(toAttrSelector(list), root);\r\n  } : function(list, root) {\r\n    // == FALLBACK ==\r\n    list = toAttrSelector(list, false, false);\r\n    return false === root ? list : queryAttrFallback(list, root); \r\n  };\r\n  \r\n  /**\r\n   * @param {Array|string} list array of attribute names (w/o bracks)\r\n   * @param {Object=} root\r\n   */\r\n  function queryAttrFallback(list, root) {\r\n    var j, i, e, els, l = list.length, ret = [], u = 0;\r\n    if (!l) return ret;\r\n    els = queryEngine('*', root);\r\n    for (j = 0; (e = els[j]); j++) {\r\n      i = l; // reset i for each outer iteration\r\n      while (i--) {// each attr name\r\n        if (attr(e, list[i]) != null) {\r\n          ret[u++] = e; // ghetto push\r\n          break; // prevent pushing same elem twice\r\n        }\r\n      }\r\n    }\r\n    return ret;\r\n  }\r\n  \r\n  // Expose remaining top-level methods:\r\n  xports['map'] = map;\r\n  xports['parse'] = parse;\r\n\r\n  /**\r\n   * @param {string|*} s\r\n   * @since 2.1.0\r\n   */\r\n  xports['parseJSON'] = function(s) {\r\n    s = parse(s);\r\n    if (typeof s == 'string') {\r\n      try {\r\n        s = parseJSON(trim(s));\r\n      } catch (e) {}\r\n    }\r\n    return s;\r\n  };\r\n\r\n  xports['trim'] = trim;\r\n  xports['qsa'] = queryEngine;\r\n  xports['attr'] = attr;\r\n  xports['removeAttr'] = removeAttr;\r\n  xports['dataset'] = dataset;\r\n  xports['deletes'] = deletes;\r\n  xports['camelize'] = camelize;\r\n  xports['datatize'] = datatize;\r\n\r\n  /**\r\n   * @this {Object|Array}\r\n   * @param {*=} k\r\n   * @param {*=} v\r\n   */\r\n  effins['dataset'] = function(k, v) {\r\n    var kMulti = typeof k == 'object' ? !(void 0 === v && datatize(k[0])) : typeof k == 'function';\r\n    if (void 0 === v && !kMulti) return dataset(this[0], k); // GET\r\n    return (k = kMulti ? k : datatize(k)) ? eachNode(this, function(e, x) {\r\n      x = typeof v == 'function' ? v.call(e) : v;\r\n      kMulti ? dataset(e, k, x) : e.setAttribute(k, '' + x); \r\n    }) : void 0 === v ? v : this;\r\n  };\r\n\r\n  /**\r\n   * @this {Object|Array}\r\n   * @param {*=} k\r\n   * @param {*=} v\r\n   */  \r\n  effins['attr'] = function(k, v) {\r\n    var kMulti = typeof k == 'object' || typeof k == 'function';\r\n    if (void 0 === v && !kMulti) return attr(this[0], k); // GET\r\n    return k ? eachNode(this, function(e, x) {\r\n      x = typeof v == 'function' ? v.call(e) : v;\r\n      kMulti ? attr(e, k, x) : e.setAttribute(k, '' + x); \r\n    }) : (void 0 === v ? v : this);\r\n  };\r\n\r\n  /**\r\n   * Remove data- attrs for each element in a collection.\r\n   * @this {Object|Array}\r\n   * @param {Array|string}  keys  one or more SSV or CSV data attr keys or names\r\n   */\r\n  effins['deletes'] = function(keys) {\r\n    if (void 0 === keys) return eachNode(this, resetDataset);\r\n    keys = typeof keys == 'string' ? keys.split(ssv) : [].concat(keys);\r\n    return eachNode(this, removeAttr, map(keys, datatize));\r\n  };\r\n  \r\n  /**\r\n   * Remove attrbutes for each element in a collection.\r\n   * @this {Object|Array}\r\n   * @param {Array|string}  keys  one or more SSV or CSV attr names\r\n   */\r\n  effins['removeAttr'] = function(keys) {\r\n    return eachNode(this, removeAttr, keys);\r\n  };\r\n\r\n  return xports;\r\n}));","\n\nimport 'dope'\n\nconst main = (event) => {\nconst eyes = document.querySelectorAll('.cls-16');\n// const flowers = document.querySelectorAll('.cls-187');\nconst selector = (query,context = document) => [].slice.call( \n  context.querySelectorAll(query)\n)\n\n// const pipe = (funcs) => input => funcs.reduce( (acc,item) => item(acc), input )\n\nconst fSelector = (context) => query => selector(query,context)\nconst flatten = multiList => multiList.reduce( (acc,item) => acc.concat(item), [] )\nconst selectMultiple = context => (...queries) => flatten(queries.map(\n  fSelector(context) \n))\n\n\nconst add = (a,b,c) => a + b +c \nconst curriedAdd = a => b => c => add(a,b,c)\nconst curry = (fn,...args) => args.length >= fn.length \n  ? fn(...args)\n  : curry.bind(null,fn,...args)\n\n\nconst selectMultiFromDocument = selectMultiple(document)\nconst flowers = selectMultiFromDocument( '.cls-186', '.cls-186' )\nconst peak = selectMultiFromDocument('.cls-182', '.cls-188');\nconst clouds = selector('g#clouds');\nconsole.log(clouds);\n\n\nconst flowersArray = selector('.cls-186');\nconst yellowFlowersArray = selector('.cls-187');\n// const flowers = $selector('.cls-186', '.cls-187');\n// console.log(flowers);\n\nfunction clearStage() {\n  var clearTl = new TimelineMax();\n\n  clearTl\n  .set(flowersArray, {autoAlpha: 0})\n  .set(yellowFlowersArray, {autoAlpha: 0})\n  .set(clouds, {left:-100, opacity:0});\n  \n\n  return clearTl;\n  }\n\n  function enterFloorVegetation() {\n    const enterFloorVegetationTl = new TimelineMax();\n          enterFloorVegetationTl\n          .fromTo(flowersArray, 1, {autoAlpha:0, scaleY:0.2, transformOrigin: 'center center'}, {autoAlpha:1, scaleY:1, transformOrigin: 'center center', ease: Back.easeInOut, onComplete: startBlinking})\n          .fromTo(yellowFlowersArray, 1, {autoAlpha:0, scaleX:0.2, transformOrigin: 'center center'}, {autoAlpha:1, scaleX:1, transformOrigin: 'center center', ease: Back.easeInOut}, \"-=0.9\")\n\n          \n          \n      \n          return enterFloorVegetationTl;\n  }\n\nconst remove = count => start => arr => {\n  // create a copy of the original array\n  // now you're not fucking with the original when you\n  // mutate the shit out of the data\n  const arrCopy = arr.slice()\n\n  // NOW MUTATE THIS BITCH\n  const thisisWhatIsSpliceOut = arrCopy.splice(start,count)\n\n  // this now no longer has the spliced out item, we want this\n  const whatRemains = arrCopy\n\n  // This seems confusing because arrCopy is mutated by\n  // the dangerous mutating function splcie\n  return [ thisisWhatIsSpliceOut, whatRemains ]\n}\n\nconst remove1 = remove(1)\n// Not pure\nconst remove1RandomItem = arr => remove1(Math.floor(Math.random() * arr.length))(arr)\n// Not pure\nconst shuffle = arr => {\n  let tempArr = arr \n  let removedItem\n  return arr.reduce( (acc,item) => ( [removedItem,tempArr] = remove1RandomItem(tempArr), acc.concat(removedItem)  ) , [])\n}\n\n\nconst flowerDance = () => {\n  const removeFirstItems = (arr,count) => remove( count )( 0 )( shuffle(flatten(arr)) )\n  \n\n  const [removeItems1,leftOver1] = removeFirstItems( flowers, 10 )\n  const [removeItems2,leftOver2] = removeFirstItems( leftOver1, 50 )\n\n    \n  return new TimelineMax({repeat:-1, repeatDelay: 1})\n  .to(removeItems1, 2, {throwProps:{rotation:360}})\n  // .to(removeItems1, 1, {y:0, rotation:32, x:'-=1'}, 0)\n  .to(removeItems2, 2, {throwProps:{rotation:360}})\n  // .to(removeItems2, 1, {y:0, rotation:32, x:'+=1'}, '-=0.2')\n    \n}\n\nfunction birdsEating() {\n  var birdsEatingTl = new TimelineMax({repeat:-1, repeatDelay: 4});\n  birdsEatingTl\n  // .set(peak, {rotation:12})\n  // .set(peak, { rotation: 0})\n  .to(peak, 1.4, {y:'+=3'}, '+=0.1')\n  .to(peak, 1.4, {y:'-=3'}, '+=0.1')\n  \n  return birdsEatingTl;\n}\n\n\n  function startBlinking() {\n    var birdBlinksTl = new TimelineMax({repeat:-1, repeatDelay: 4});\n\n    // birdBlinksTl\n    //   .set(eyes, {autoAlpha:0})\n    //   .set(eyes, {autoAlpha:1}, '+=0.2')\n    //   .set(eyes, {autoAlpha:0}, '+=2.2')\n    //   .set(eyes, {autoAlpha:1}, '+=0.2');\n    \n    return birdBlinksTl;\n  }\n\n\n  //clouds moving \n  function cloudsMoving() {\n const cloudsMovingTl = new TimelineMax({repeat:-1});\n        cloudsMovingTl\n        .to(clouds, 0.8, {opacity:1})\n        // .to(clouds, 1, {x:'-=1250'})\n        .to(clouds, 6 + (Math.random() * 8), {x:\"100%\", ease:Linear.easeNone}, 0)\n        return cloudsMovingTl;\n  }\n\n  // flowers falling\n\t// (function doFallingLeaves() {\n    // TweenMax.set(flowers, {y: -100, autoAlpha: 0.2});\n    \n    // TweenMax.to(flowers, 10 + Math.random()*10, {y:'+=200', autoAlpha:1, ease: Linear.easeNone, onComplete: doneFalling, onCompleteParams: [flowers] });\n    // // TweenMax.to(\"#redLeaf\", 10 + Math.random()*10, {y:'+=1200', autoAlpha:1, ease: Linear.easeNone, onComplete: doneFalling, onCompleteParams: [\"#redLeaf\"] });\n    // // TweenMax.to(\"#orangeLeaf\", 10 + Math.random()*10, {y:'+=1200', autoAlpha:1, ease: Linear.easeNone,  onComplete: doneFalling, onCompleteParams: [\"#orangeLeaf\"] });\n\n    // function doneFalling(leafId) {\n    //   var range = Math.random() * 800;\n    //   range = range - 400;\n\n    //   TweenMax.set(leafId, {y: -100, x: range, autoAlpha: 0.2, rotation: Math.random()*360});\n    //   TweenMax.to(leafId, 10 + Math.random()*10, {y:'+=1200', autoAlpha:1, ease: Linear.easeNone, onComplete: doneFalling, onCompleteParams: [leafId] });\n    // }\n    \n  // })();\n\n\n\n  //eyes blink\n\n  // function eyesBlink() {\n  //   const eyesBlinkTl = new TimelineMax();\n  //   eyesBlinkTl\n  // }\n\n\n  function go() {\n    console.log('hey...')\n    var masterTl  = new TimelineMax();\n    masterTl \n    // .add(clearStage(), 'scene-clear-stage')\n    .add(enterFloorVegetation(), 'scene-floor-vegetation')\n    // .add(birdsEating(), \"birds-eating\")\n    .add(cloudsMoving(), 'clouds-moving')\n    .add( flowerDance(), 0)\n    \n  }\n \n  go();\n}\n\n\n\n\n// function startBlinking() {\n//   var birdBlinksTl = new TimelineMax({repeat:-1, repeatDelay: 4});\n\n//   birdBlinksTl\n//     .set($birdEyes, {autoAlpha:0})\n//     .set($birdEyes, {autoAlpha:1}, '+=0.2')\n//     .set($birdEyes, {autoAlpha:0}, '+=1.2')\n//     .set($birdEyes, {autoAlpha:1}, '+=0.2');\n\n// }\n  \n  \n\n  \n  document.addEventListener('DOMContentLoaded',main)\n\n\n\n\n"]}